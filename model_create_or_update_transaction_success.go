/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateOrUpdateTransactionSuccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateOrUpdateTransactionSuccess{}

// CreateOrUpdateTransactionSuccess struct for CreateOrUpdateTransactionSuccess
type CreateOrUpdateTransactionSuccess struct {
	// The total tax amount to collect from the customer, in the smallest denomination of the currency (e.g. cents or pennies)
	TaxAmountToCollect *int64 `json:"taxAmountToCollect,omitempty"`
	LineItems []CreateEphemeralTransactionSuccessLineItemsInner `json:"lineItems,omitempty"`
	// The transaction version
	Version *int32 `json:"version,omitempty"`
}

// NewCreateOrUpdateTransactionSuccess instantiates a new CreateOrUpdateTransactionSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateOrUpdateTransactionSuccess() *CreateOrUpdateTransactionSuccess {
	this := CreateOrUpdateTransactionSuccess{}
	return &this
}

// NewCreateOrUpdateTransactionSuccessWithDefaults instantiates a new CreateOrUpdateTransactionSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateOrUpdateTransactionSuccessWithDefaults() *CreateOrUpdateTransactionSuccess {
	this := CreateOrUpdateTransactionSuccess{}
	return &this
}

// GetTaxAmountToCollect returns the TaxAmountToCollect field value if set, zero value otherwise.
func (o *CreateOrUpdateTransactionSuccess) GetTaxAmountToCollect() int64 {
	if o == nil || IsNil(o.TaxAmountToCollect) {
		var ret int64
		return ret
	}
	return *o.TaxAmountToCollect
}

// GetTaxAmountToCollectOk returns a tuple with the TaxAmountToCollect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateTransactionSuccess) GetTaxAmountToCollectOk() (*int64, bool) {
	if o == nil || IsNil(o.TaxAmountToCollect) {
		return nil, false
	}
	return o.TaxAmountToCollect, true
}

// HasTaxAmountToCollect returns a boolean if a field has been set.
func (o *CreateOrUpdateTransactionSuccess) HasTaxAmountToCollect() bool {
	if o != nil && !IsNil(o.TaxAmountToCollect) {
		return true
	}

	return false
}

// SetTaxAmountToCollect gets a reference to the given int64 and assigns it to the TaxAmountToCollect field.
func (o *CreateOrUpdateTransactionSuccess) SetTaxAmountToCollect(v int64) {
	o.TaxAmountToCollect = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *CreateOrUpdateTransactionSuccess) GetLineItems() []CreateEphemeralTransactionSuccessLineItemsInner {
	if o == nil || IsNil(o.LineItems) {
		var ret []CreateEphemeralTransactionSuccessLineItemsInner
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateTransactionSuccess) GetLineItemsOk() ([]CreateEphemeralTransactionSuccessLineItemsInner, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *CreateOrUpdateTransactionSuccess) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []CreateEphemeralTransactionSuccessLineItemsInner and assigns it to the LineItems field.
func (o *CreateOrUpdateTransactionSuccess) SetLineItems(v []CreateEphemeralTransactionSuccessLineItemsInner) {
	o.LineItems = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CreateOrUpdateTransactionSuccess) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateOrUpdateTransactionSuccess) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CreateOrUpdateTransactionSuccess) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *CreateOrUpdateTransactionSuccess) SetVersion(v int32) {
	o.Version = &v
}

func (o CreateOrUpdateTransactionSuccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateOrUpdateTransactionSuccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxAmountToCollect) {
		toSerialize["taxAmountToCollect"] = o.TaxAmountToCollect
	}
	if !IsNil(o.LineItems) {
		toSerialize["lineItems"] = o.LineItems
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableCreateOrUpdateTransactionSuccess struct {
	value *CreateOrUpdateTransactionSuccess
	isSet bool
}

func (v NullableCreateOrUpdateTransactionSuccess) Get() *CreateOrUpdateTransactionSuccess {
	return v.value
}

func (v *NullableCreateOrUpdateTransactionSuccess) Set(val *CreateOrUpdateTransactionSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateOrUpdateTransactionSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateOrUpdateTransactionSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateOrUpdateTransactionSuccess(val *CreateOrUpdateTransactionSuccess) *NullableCreateOrUpdateTransactionSuccess {
	return &NullableCreateOrUpdateTransactionSuccess{value: val, isSet: true}
}

func (v NullableCreateOrUpdateTransactionSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateOrUpdateTransactionSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


