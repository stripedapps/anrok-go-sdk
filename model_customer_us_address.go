/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerUsAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerUsAddress{}

// CustomerUsAddress struct for CustomerUsAddress
type CustomerUsAddress struct {
	Country string `json:"country"`
	// The \"delivery line\" of the address
	Line1 *string `json:"line1,omitempty"`
	// The standard USPS format
	City *string `json:"city,omitempty"`
	// The standard USPS format
	State *string `json:"state,omitempty"`
	// The standard USPS format
	ZipCode *string `json:"zipCode,omitempty"`
}

// NewCustomerUsAddress instantiates a new CustomerUsAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerUsAddress(country string) *CustomerUsAddress {
	this := CustomerUsAddress{}
	this.Country = country
	return &this
}

// NewCustomerUsAddressWithDefaults instantiates a new CustomerUsAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerUsAddressWithDefaults() *CustomerUsAddress {
	this := CustomerUsAddress{}
	return &this
}

// GetCountry returns the Country field value
func (o *CustomerUsAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CustomerUsAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CustomerUsAddress) SetCountry(v string) {
	o.Country = v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *CustomerUsAddress) GetLine1() string {
	if o == nil || IsNil(o.Line1) {
		var ret string
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUsAddress) GetLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.Line1) {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *CustomerUsAddress) HasLine1() bool {
	if o != nil && !IsNil(o.Line1) {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given string and assigns it to the Line1 field.
func (o *CustomerUsAddress) SetLine1(v string) {
	o.Line1 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CustomerUsAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUsAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CustomerUsAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CustomerUsAddress) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CustomerUsAddress) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUsAddress) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CustomerUsAddress) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CustomerUsAddress) SetState(v string) {
	o.State = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *CustomerUsAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode) {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerUsAddress) GetZipCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ZipCode) {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *CustomerUsAddress) HasZipCode() bool {
	if o != nil && !IsNil(o.ZipCode) {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *CustomerUsAddress) SetZipCode(v string) {
	o.ZipCode = &v
}

func (o CustomerUsAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerUsAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	if !IsNil(o.Line1) {
		toSerialize["line1"] = o.Line1
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ZipCode) {
		toSerialize["zipCode"] = o.ZipCode
	}
	return toSerialize, nil
}

type NullableCustomerUsAddress struct {
	value *CustomerUsAddress
	isSet bool
}

func (v NullableCustomerUsAddress) Get() *CustomerUsAddress {
	return v.value
}

func (v *NullableCustomerUsAddress) Set(val *CustomerUsAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerUsAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerUsAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerUsAddress(val *CustomerUsAddress) *NullableCustomerUsAddress {
	return &NullableCustomerUsAddress{value: val, isSet: true}
}

func (v NullableCustomerUsAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerUsAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


