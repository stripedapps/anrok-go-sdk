/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TransactionsCreateOrUpdate409Response - struct for TransactionsCreateOrUpdate409Response
type TransactionsCreateOrUpdate409Response struct {
	CreateTransactionCannotComputeTaxAmount *CreateTransactionCannotComputeTaxAmount
	CreateTransactionCannotUpdate *CreateTransactionCannotUpdate
}

// CreateTransactionCannotComputeTaxAmountAsTransactionsCreateOrUpdate409Response is a convenience function that returns CreateTransactionCannotComputeTaxAmount wrapped in TransactionsCreateOrUpdate409Response
func CreateTransactionCannotComputeTaxAmountAsTransactionsCreateOrUpdate409Response(v *CreateTransactionCannotComputeTaxAmount) TransactionsCreateOrUpdate409Response {
	return TransactionsCreateOrUpdate409Response{
		CreateTransactionCannotComputeTaxAmount: v,
	}
}

// CreateTransactionCannotUpdateAsTransactionsCreateOrUpdate409Response is a convenience function that returns CreateTransactionCannotUpdate wrapped in TransactionsCreateOrUpdate409Response
func CreateTransactionCannotUpdateAsTransactionsCreateOrUpdate409Response(v *CreateTransactionCannotUpdate) TransactionsCreateOrUpdate409Response {
	return TransactionsCreateOrUpdate409Response{
		CreateTransactionCannotUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TransactionsCreateOrUpdate409Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateTransactionCannotComputeTaxAmount
	err = newStrictDecoder(data).Decode(&dst.CreateTransactionCannotComputeTaxAmount)
	if err == nil {
		jsonCreateTransactionCannotComputeTaxAmount, _ := json.Marshal(dst.CreateTransactionCannotComputeTaxAmount)
		if string(jsonCreateTransactionCannotComputeTaxAmount) == "{}" { // empty struct
			dst.CreateTransactionCannotComputeTaxAmount = nil
		} else {
			match++
		}
	} else {
		dst.CreateTransactionCannotComputeTaxAmount = nil
	}

	// try to unmarshal data into CreateTransactionCannotUpdate
	err = newStrictDecoder(data).Decode(&dst.CreateTransactionCannotUpdate)
	if err == nil {
		jsonCreateTransactionCannotUpdate, _ := json.Marshal(dst.CreateTransactionCannotUpdate)
		if string(jsonCreateTransactionCannotUpdate) == "{}" { // empty struct
			dst.CreateTransactionCannotUpdate = nil
		} else {
			match++
		}
	} else {
		dst.CreateTransactionCannotUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateTransactionCannotComputeTaxAmount = nil
		dst.CreateTransactionCannotUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TransactionsCreateOrUpdate409Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TransactionsCreateOrUpdate409Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionsCreateOrUpdate409Response) MarshalJSON() ([]byte, error) {
	if src.CreateTransactionCannotComputeTaxAmount != nil {
		return json.Marshal(&src.CreateTransactionCannotComputeTaxAmount)
	}

	if src.CreateTransactionCannotUpdate != nil {
		return json.Marshal(&src.CreateTransactionCannotUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TransactionsCreateOrUpdate409Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CreateTransactionCannotComputeTaxAmount != nil {
		return obj.CreateTransactionCannotComputeTaxAmount
	}

	if obj.CreateTransactionCannotUpdate != nil {
		return obj.CreateTransactionCannotUpdate
	}

	// all schemas are nil
	return nil
}

type NullableTransactionsCreateOrUpdate409Response struct {
	value *TransactionsCreateOrUpdate409Response
	isSet bool
}

func (v NullableTransactionsCreateOrUpdate409Response) Get() *TransactionsCreateOrUpdate409Response {
	return v.value
}

func (v *NullableTransactionsCreateOrUpdate409Response) Set(val *TransactionsCreateOrUpdate409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsCreateOrUpdate409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsCreateOrUpdate409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsCreateOrUpdate409Response(val *TransactionsCreateOrUpdate409Response) *NullableTransactionsCreateOrUpdate409Response {
	return &NullableTransactionsCreateOrUpdate409Response{value: val, isSet: true}
}

func (v NullableTransactionsCreateOrUpdate409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsCreateOrUpdate409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


