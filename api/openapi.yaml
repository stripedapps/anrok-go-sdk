openapi: 3.1.0
info:
  contact:
    email: support@anrok.com
  description: |
    # API reference

    The Anrok API server is accessible at `https://api.anrok.com`.

    All requests are HTTP POSTs with JSON in the body.

    Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.

    The default rate limit for a seller account is 10 API requests per second.
  license:
    name: All rights reserved
    url: https://www.anrok.com
  termsOfService: https://www.anrok.com/privacy-terms
  title: Anrok API
  version: "1.1"
  x-logo:
    url: https://global-uploads.webflow.com/632add85afcd1ac30aa74675/6357842d130e1f3e0e23d1fe_anrok_logo.svg
externalDocs:
  description: API Tutorials
  url: https://apidocs.anrok.com/tutorials
servers:
- url: https://api.anrok.com
security:
- http: []
tags:
- description: |
    A sales tax exemption certificate documents the exemption claimed by a purchaser
    to legally make a tax-free purchase.
    Certificates can be uploaded to Anrok via the Anrok UI as well as via the API.
    See our
    <a href="https://help-center.anrok.com/hc/en-us/articles/24861687025299-Upload-an-exemption-certificate">Help Center article</a>
    for more information.
  name: Customer certificates
- description: |
    This documentation describes how to use Anrok's Transactions API to synchronize transactions between Anrok and your billing system, as well as calculate sales tax for new invoices. Use of this API is generally recommended for sellers with custom billing systems or workflows that prevent you from using one of our pre-built platform integrations. Sellers utilizing Stripe Subscriptions or Checkout may also use this API to calculate and add tax on initial invoices, while continuing to use Anrok's Stripe integration to manage tax for subsequent billing cycles.

    # Invoice lifecycle
    1. When an invoice is created: the billing system should call the `createEphemeral` endpoint to calculate the sales tax amount.
    1. When an invoice is updated: same as above.
    1. When an invoice is finalized and ready to send to the customer: the billing system should call the `createOrUpdate` endpoint so that the transaction is recorded in Anrok.
    1. When an invoice is paid: Anrok does not need to be notified. Sellers are required to remit sales tax to a state upon invoice, not receipt of payment.

    While the above covers a standard invoice lifecycle, the Transactions API also includes endpoints for exceptional states like voiding and negating invoices, which are described below.
  name: Transactions
- description: |
    Distinct from Anrok's Transaction API, these endpoints enable you to manage
    your Product IDs in Anrok via API. You may use these endpoints to supplement
    your core integration, whether that's through our Transaction API or one of our
    partner integrations. This API is designed to support you in dynamically
    mapping new Products and viewing a comprehensive list of existing mappings.
    Because we aim to keep your product list in Anrok minimal and focused on truly
    distinct offerings, we use mappings to associate various products in your
    billing system with the equivalent products in Anrok. This API enables you to
    confirm that each product on any transaction seen by Anrok is mapped to a
    defined product and will be assessed properly for taxability calculations as a
    result.
  name: Product mappings
- description: "**The Anrok Tax ID Validation endpoint is a premium feature. Please\
    \ contact hello@anrok.com for more information to enable this on your Anrok seller\
    \ account.**\n\n\n1. Pass a customer address and an empty array of customerTaxIds:\n\
    \t- Anrok verifies the customer address is valid for tax calculation.\n\t- Anrok\
    \ responds with the list of customer tax IDs to collect.\n1. Collect the customer\
    \ tax IDs and call the API endpoint again to validate them:\n\t- Anrok provides\
    \ a list of valid tax IDs for each applicable jurisdiction.\n"
  name: Tax ID validation
paths:
  /v1/seller/certificates/create:
    post:
      description: This endpoint is used to create a new customer certificate in Anrok.
      operationId: certificatesCreate
      requestBody:
        content:
          application/json:
            example:
              customerId: cus_123
              customerName: Acme Inc
              effectiveDateBegin: 2022-01-01
              exemptionNumber: cert-100
              certificateFile:
                name: cert.png
                contentsBase64: Y2VydC5wbmc=
              jurises:
              - jurisId: us-MA
            schema:
              $ref: '#/components/schemas/CustomerCertificate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificatesCreate_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                missingRequiredProperty:
                  summary: Missing required property
                  value: "Request body: \"customerId\": Required."
              schema:
                type: string
          description: Bad Request
        "409":
          content:
            application/json:
              example:
                type: duplicateJurisIds
              schema:
                $ref: '#/components/schemas/certificatesCreate_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Create customer certificate
      tags:
      - Customer certificates
      x-codeSamples:
      - lang: cURL
        source: |-
          apiToken="sxxx/saxxx/secret.xxx"
          certName="cert.png"
          certContentsBase64=$(base64 -i "$certName")

          curl -X POST https://api.anrok.com/v1/seller/certificates/create \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d "{
              \"customerId\": \"customer-id-0\",
              \"effectiveDateBegin\": \"2022-12-13\",
              \"exemptionNumber\": \"cert-100\",
              \"certificateFile\": {
                  \"name\": \"$certName\",
                  \"contentsBase64\": \"$certContentsBase64\"
              },
              \"jurises\": [{
                  \"jurisId\": \"us-MA\"
              }]
            }"
  /v1/seller/certificates/id:{certificateId}/archive:
    parameters:
    - $ref: '#/components/parameters/CertificateId'
    post:
      description: This endpoint is used to archive/invalidate a customer certificate.
      operationId: certificatesArchive
      parameters:
      - $ref: '#/components/parameters/CertificateId'
      requestBody:
        $ref: '#/components/requestBodies/Empty'
      responses:
        "200":
          $ref: '#/components/responses/EmptyResponse'
        "409":
          content:
            application/json:
              example:
                type: certificateIdNotFound
              schema:
                $ref: '#/components/schemas/certificatesArchive_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Archive customer certificate
      tags:
      - Customer certificates
      x-codeSamples:
      - lang: cURL
        source: |-
          apiToken="sxxx/saxxx/secret.xxx"
          certificateId="ctec6vx7gtrmxq"

          curl -X POST "https://api.anrok.com/v1/seller/certificates/id:$certificateId/archive" \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d "{}"
  /v1/seller/transactions/createOrUpdate:
    post:
      description: "Given the details of an invoice, calculate sales tax and save\
        \ it as a transaction in Anrok. Saved transactions are used by Anrok to file\
        \ sales tax returns and monitor sales thresholds."
      operationId: transactionsCreateOrUpdate
      requestBody:
        content:
          application/json:
            example:
              id: stripe:in_1JSW342eZvKYlo2C
              currencyCode: usd
              accountingTime: 2022-01-02T03:30:00Z
              accountingTimeZone: UTC
              lineItems:
              - id: item-1
                productExternalId: saas-product-1
                amount: 15000
                isTaxIncludedInAmount: false
                quantity: "1"
              - id: item-2
                productExternalId: saas-product-2
                amount: 31000
                isTaxIncludedInAmount: true
                quantity: "12.3"
              - id: item-3
                productExternalId: not-taxable-3
                amount: 24000
              customerAddress:
                country: us
                line1: 1450 Cherokee St
                city: Denver
                region: CO
                postalCode: "80204"
              shipFromAddress:
                country: us
                line1: 230 S LaSalle St
                city: Chicago
                region: IL
                postalCode: "60604"
            schema:
              $ref: '#/components/schemas/CreateOrUpdateTransaction'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                version: 1
                taxAmountToCollect: 722
                lineItems:
                - id: item-1
                  taxAmountToCollect: 722
                  preTaxAmount: "15000"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                  - name: Denver (local)
                    taxes:
                    - taxName: Tax
                      taxableAmount: "15000"
                      taxAmount: "721.5"
                      taxRate: "0.0481"
                    notTaxedReason: null
                - id: item-2
                  taxAmountToCollect: 0
                  preTaxAmount: "29577.3304"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                  - name: Denver (local)
                    taxes:
                    - taxName: Tax
                      taxableAmount: "29577.3304"
                      taxAmount: "1422.6696"
                      taxRate: "0.0481"
                    notTaxedReason: null
                - id: item-3
                  taxAmountToCollect: 0
                  preTaxAmount: "24000"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                preTaxAmount: "68577.3304"
                jurisSummaries:
                - name: Colorado
                  notTaxedReasons:
                  - type: productNotTaxed
                - name: Denver (local)
                  notTaxedReasons: null
              schema:
                $ref: '#/components/schemas/CreateOrUpdateTransactionSuccess'
          description: OK
        "400":
          $ref: '#/components/responses/CreateTransactionBadRequest'
        "409":
          content:
            application/json:
              examples:
                taxDateTooFarInFuture:
                  $ref: '#/components/examples/ConflictTaxDateTooFarInFuture'
                accoutingTimeZoneNotSetForSeller:
                  $ref: '#/components/examples/ConflictAccountingTimeZoneNotSetForSeller'
              schema:
                $ref: '#/components/schemas/transactionsCreateOrUpdate_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Create or update transaction
      tags:
      - Transactions
      x-codeSamples:
      - lang: cURL
        source: |
          apiToken='sxxx/saxxx/secret.xxx'

          curl -X POST https://api.anrok.com/v1/seller/transactions/createOrUpdate \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d '{
              "id": "stripe:in_1JSW342eZvKYlo2C",
              "currencyCode": "usd",
              "accountingTime": "2022-01-02T03:30:00Z",
              "accountingTimeZone": "UTC",
              "lineItems": [{
                "id": "item-1",
                "productExternalId": "saas-product-1",
                "amount": 15000,
                "isTaxIncludedInAmount": false,
                "quantity": "1"
              },
              {
                "id": "item-2",
                "productExternalId": "saas-product-2",
                "amount": 31000,
                "isTaxIncludedInAmount": true,
                "quantity": "12.3"
              },
              {
                "id": "item-3",
                "productExternalId": "not-taxable-3",
                "amount": 24000
              }],
              "customerAddress": {
                "country": "us",
                "line1": "1450 Cherokee St",
                "city": "Denver",
                "region": "CO",
                "postalCode": "80204"
              },
              "shipFromAddress": {
                "country": "us",
                "line1": "230 S LaSalle St",
                "city": "Chicago",
                "region": "IL",
                "postalCode": "60604"
              }
            }'
  /v1/seller/transactions/createEphemeral:
    post:
      description: "Given the details of an invoice, calculate sales tax without saving\
        \ the transaction in Anrok. Ephemeral transactions are not used by Anrok to\
        \ file sales tax returns or monitor sales thresholds."
      operationId: transactionsCreateEphemeral
      requestBody:
        content:
          application/json:
            example:
              currencyCode: usd
              accountingTime: 2022-01-02T03:30:00Z
              accountingTimeZone: UTC
              lineItems:
              - id: item-1
                productExternalId: saas-product-1
                amount: 15000
                isTaxIncludedInAmount: false
                quantity: "1"
              - id: item-2
                productExternalId: saas-product-2
                amount: 31000
                isTaxIncludedInAmount: true
                quantity: "12.3"
              - id: item-3
                productExternalId: not-taxable-3
                amount: 24000
              customerAddress:
                country: us
                line1: 1450 Cherokee St
                city: Denver
                region: CO
                postalCode: "80204"
              shipFromAddress:
                country: us
                line1: 230 S LaSalle St
                city: Chicago
                region: IL
                postalCode: "60604"
            schema:
              $ref: '#/components/schemas/CreateEphemeralTransaction'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                taxAmountToCollect: 722
                lineItems:
                - id: item-1
                  taxAmountToCollect: 722
                  preTaxAmount: "15000"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                  - name: Denver (local)
                    taxes:
                    - taxName: Tax
                      taxableAmount: "15000"
                      taxAmount: "721.5"
                      taxRate: "0.0481"
                    notTaxedReason: null
                - id: item-2
                  taxAmountToCollect: 0
                  preTaxAmount: "29577.3304"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                  - name: Denver (local)
                    taxes:
                    - taxName: Tax
                      taxableAmount: "29577.3304"
                      taxAmount: "1422.6696"
                      taxRate: "0.0481"
                    notTaxedReason: null
                - id: item-3
                  taxAmountToCollect: 0
                  preTaxAmount: "24000"
                  jurises:
                  - name: Colorado
                    taxes: null
                    notTaxedReason:
                      type: productNotTaxed
                preTaxAmount: "68577.3304"
                jurisSummaries:
                - name: Colorado
                  notTaxedReasons:
                  - type: productNotTaxed
                - name: Denver (local)
                  notTaxedReasons: null
              schema:
                $ref: '#/components/schemas/CreateEphemeralTransactionSuccess'
          description: OK
        "400":
          $ref: '#/components/responses/CreateTransactionBadRequest'
        "409":
          content:
            application/json:
              examples:
                taxDateTooFarInFuture:
                  $ref: '#/components/examples/ConflictTaxDateTooFarInFuture'
                accoutingTimeZoneNotSetForSeller:
                  $ref: '#/components/examples/ConflictAccountingTimeZoneNotSetForSeller'
              schema:
                $ref: '#/components/schemas/CreateTransactionCannotComputeTaxAmount'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Create ephemeral transaction
      tags:
      - Transactions
      x-codeSamples:
      - lang: cURL
        source: |
          apiToken='sxxx/saxxx/secret.xxx'

          curl -X POST https://api.anrok.com/v1/seller/transactions/createEphemeral \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d '{
              "currencyCode": "usd",
              "accountingTime": "2022-01-02T03:30:00Z",
              "accountingTimeZone": "UTC",
              "lineItems": [{
                "id": "item-1",
                "productExternalId": "saas-product-1",
                "amount": 15000,
                "isTaxIncludedInAmount": false,
                "quantity": "1"
              },
              {
                "id": "item-2",
                "productExternalId": "saas-product-2",
                "amount": 31000,
                "isTaxIncludedInAmount": true,
                "quantity": "12.3"
              },
              {
                "id": "item-3",
                "productExternalId": "not-taxable-3",
                "amount": 24000
              }],
              "customerAddress": {
                "country": "us",
                "line1": "1450 Cherokee St",
                "city": "Denver",
                "region": "CO",
                "postalCode": "80204"
              },
              "shipFromAddress": {
                "country": "us",
                "line1": "230 S LaSalle St",
                "city": "Chicago",
                "region": "IL",
                "postalCode": "60604"
              }
            }'
  /v1/seller/transactions/createNegation:
    post:
      description: Creates a new transaction that is the exact inverse of the given
        transaction. The sale prices and tax amounts will add up to zero.
      operationId: transactionsCreateNegation
      requestBody:
        $ref: '#/components/requestBodies/CreateNegation'
      responses:
        "200":
          $ref: '#/components/responses/EmptyResponse'
        "400":
          $ref: '#/components/responses/CreateNegationBadRequest'
        "409":
          $ref: '#/components/responses/CreateNegationConflict'
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Create negation
      tags:
      - Transactions
      x-codeSamples:
      - lang: cURL
        source: |-
          apiToken='sxxx/saxxx/secret.xxx'

          curl -X POST https://api.anrok.com/v1/seller/transactions/createRefund \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d '{
              "originalTransactionId": "stripe:in_1JSW342eZvKYlo2C",
              "newTransactionId": "stripe:in_1JSW342eZvKYlo2C_refund"
            }'
  /v1/seller/transactions/id:{transactionId}/void:
    parameters:
    - $ref: '#/components/parameters/TransactionId'
    post:
      description: Mark a previously-created transaction as void. It will no longer
        be included in returns or sales totals.
      operationId: transactionsVoid
      parameters:
      - $ref: '#/components/parameters/TransactionId'
      requestBody:
        content:
          application/json:
            examples:
              emptyExample:
                summary: Empty request body
                value: {}
              expectVersion:
                summary: Expected transaction version
                value:
                  transactionExpectedVersion: 1
            schema:
              $ref: '#/components/schemas/transactionsVoid_request'
        required: true
      responses:
        "200":
          $ref: '#/components/responses/EmptyResponse'
        "409":
          content:
            application/json:
              example:
                type: transactionIdNotFound
              schema:
                $ref: '#/components/schemas/transactionsVoid_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Void transaction
      tags:
      - Transactions
      x-codeSamples:
      - lang: cURL
        source: |-
          apiToken='sxxx/saxxx/secret.xxx'

          curl -X POST https://api.anrok.com/v1/seller/transactions/id:stripe:in_1JSW342eZvKYlo2C/void \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d '{}'
  /v1/seller/integrations/id:{integrationId}/productIdMapping/list:
    parameters:
    - $ref: '#/components/parameters/IntegrationId'
    post:
      description: Lists all Product ID mappings for this integration.
      operationId: productIdMappingsList
      parameters:
      - $ref: '#/components/parameters/IntegrationId'
      requestBody:
        $ref: '#/components/requestBodies/Empty'
      responses:
        "200":
          content:
            application/json:
              example:
              - billing_system_id_1: anrok_id_1
              - billing_system_id_2: anrok_id_2
              schema:
                items:
                  additionalProperties:
                    type: string
                type: array
          description: OK
        "409":
          content:
            application/json:
              example:
                type: integrationIdNotFound
              schema:
                $ref: '#/components/schemas/productIdMappingsList_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: List product mappings
      tags:
      - Product mappings
  /v1/seller/integrations/id:{integrationId}/productIdMapping/add:
    parameters:
    - $ref: '#/components/parameters/IntegrationId'
    post:
      description: Adds a product ID mapping for this integration.
      operationId: productIdMappingsAdd
      parameters:
      - $ref: '#/components/parameters/IntegrationId'
      requestBody:
        content:
          application/json:
            example:
              sourceId: billing system ID
              targetId: anrok ID
            schema:
              $ref: '#/components/schemas/productIdMappingsAdd_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              example: {}
              schema:
                type: object
          description: OK
        "409":
          content:
            application/json:
              example:
                type: targetIdNotFound
              schema:
                $ref: '#/components/schemas/productIdMappingsAdd_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Add product mapping
      tags:
      - Product mappings
  /v1/seller/taxId/validate:
    post:
      description: This endpoint is used to assist in the collection and validation
        of customer tax IDs.
      operationId: taxIdsValidate
      requestBody:
        content:
          application/json:
            example:
              customerAddress:
                country: CA
                line1: 123 Main St
                city: Quebec City
                region: Quebec
                postalCode: G1P 2J6
              customerTaxIds:
              - value: "123456789"
              - value: "987654321"
            schema:
              $ref: '#/components/schemas/ValidateTaxId'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                jurises:
                - name: Canada (federal)
                  taxIdNames:
                    name: GST/HST account number
                    abbreviation: null
                  validTaxIds:
                  - value: "123456789"
                - name: Quebec
                  taxIdNames:
                    name: QST registration number
                    abbreviation: null
                  validTaxIds:
                  - value: "987654321"
              schema:
                $ref: '#/components/schemas/ValidateTaxIdSuccess'
          description: OK
        "400":
          content:
            application/json:
              examples:
                missingRequiredProperty:
                  summary: Missing required property
                  value: "Request body: \"customerAddress\": Required."
              schema:
                type: string
          description: Bad Request
        "409":
          content:
            application/json:
              example:
                type: customerAddressCouldNotResolve
              schema:
                $ref: '#/components/schemas/taxIdsValidate_409_response'
          description: Conflict
        "429":
          $ref: '#/components/responses/RateLimit'
      summary: Validate tax IDs
      tags:
      - Tax ID validation
      x-codeSamples:
      - lang: cURL
        source: |-
          apiToken='sxxx/saxxx/secret.xxx'

          curl -X POST https://api.anrok.com/v1/seller/taxId/validate \
            -H 'Content-Type: application/json' \
            -H "Authorization: Bearer $apiToken" \
            -d '{
              "customerAddress": {
                "country": "CA",
                "line1": "123 Main St",
                "city": "Quebec City",
                "region": "Quebec",
                "postalCode": "G1P 2J6"
              },
              "customerTaxIds": [{
                "value": "123456789"
              }]
            }'
components:
  examples:
    ConflictTaxDateTooFarInFuture:
      summary: Anrok accepts dates up to 31 days in the future.
      value:
        type: taxDateTooFarInFuture
    ConflictAccountingTimeZoneNotSetForSeller:
      summary: Cannot determine accounting date from accountingTime without time zone
      value:
        type: accountingTimeZoneNotSetForSeller
  parameters:
    CertificateId:
      description: ID of the certificate you want to archive.
      explode: false
      in: path
      name: certificateId
      required: true
      schema:
        type: string
      style: simple
    TransactionId:
      description: ID of the transaction you want to void.
      explode: false
      in: path
      name: transactionId
      required: true
      schema:
        type: string
      style: simple
    IntegrationId:
      description: Your unique integration ID.
      explode: false
      in: path
      name: integrationId
      required: true
      schema:
        type: string
      style: simple
  requestBodies:
    Empty:
      content:
        application/json:
          examples:
            emptyExample:
              summary: Empty request body
              value: {}
          schema:
            type: object
      required: true
    CreateNegation:
      content:
        application/json:
          example:
            originalTransactionId: stripe:in_1JSW342eZvKYlo2C
            newTransactionId: stripe:in_1JSW342eZvKYlo2C_refund
          schema:
            $ref: '#/components/schemas/transactionsCreateNegation_request'
      required: true
  responses:
    RateLimit:
      content:
        text/plain:
          example: You've exceeded your API limit of 10 per second
          schema:
            type: string
      description: Too Many Requests
      headers:
        Retry-After:
          description: Number of seconds to wait for rate limit to reset.
          explode: false
          schema:
            type: integer
          style: simple
    EmptyResponse:
      content:
        application/json:
          example: {}
          schema:
            type: object
      description: OK
    CreateTransactionBadRequest:
      content:
        application/json:
          examples:
            missingRequiredProperty:
              summary: Missing required property
              value: "Request body: \"lineItems\": Required."
            missingCustomerAddress:
              summary: Missing "customerAddress"
              value: "Request body: \"customerAddress\": Invalid input."
            usAddressMissingCountry:
              summary: A US customer address must include the "country" property.
              value: "Request body: \"customerAddress\": Unrecognized key(s) in object:\
                \ 'state', 'zipCode'."
            redundantTimeZoneProvided:
              summary: If accountingDate is provided then accountingTimeZone must
                be omitted.
              value: "Request body: Cannot specify both accountingDate and accountingTimeZone."
            missingAccountingDate:
              summary: Not enough info to determine accounting date
              value: "Request body: Must specify either accountingDate or accountingTimeZone."
          schema:
            type: string
      description: Bad Request
    CreateNegationBadRequest:
      content:
        application/json:
          examples:
            missingRequestProperty:
              summary: Required property missing
              value: "Request body: \"newTransactionId\": Required."
          schema:
            type: string
      description: Bad Request
    CreateNegationConflict:
      content:
        application/json:
          example:
            type: transactionExpectedVersionMismatch
          schema:
            $ref: '#/components/schemas/inline_object'
      description: Conflict
  schemas:
    CustomerId:
      description: |
        The Anrok customer ID used to link transactions for the same customer and to look up tax exemption certificates for a customer. This is typically the billing system's customer ID with a prefix to disambiguate.
        - If customerId is provided without customerName, that customer object must
          already exist in Anrok.
        - If both customerId and customerName are provided, the customer object will
          be created if it is not already present.
        - Customer IDs are unique across the entire seller account.
      type: string
    CustomerName:
      description: The name of the customer. This is used for display purposes only.
      type: string
    CustomerCertificateFile:
      example:
        contentsBase64: contentsBase64
        name: name
      properties:
        name:
          description: File name
          type: string
        contentsBase64:
          description: Base64 encoded certificate image contents
          type: string
      required:
      - contentsBase64
      - name
    CustomerCertificateJuris:
      example:
        effectiveDateEndi: 2000-01-23
        notes: notes
        registrationId: registrationId
        jurisId: us-AK
      properties:
        jurisId:
          description: Jurisdiction ID for which this exemption should apply (US only).
          enum:
          - us-AK
          - us-AL
          - us-AR
          - us-AS
          - us-AZ
          - us-CA
          - us-CO
          - us-CT
          - us-DC
          - us-DE
          - us-FL
          - us-GA
          - us-GU
          - us-HI
          - us-IA
          - us-ID
          - us-IL
          - us-IN
          - us-KS
          - us-KY
          - us-LA
          - us-MA
          - us-MD
          - us-ME
          - us-MI
          - us-MN
          - us-MO
          - us-MP
          - us-MS
          - us-MT
          - us-NC
          - us-ND
          - us-NE
          - us-NH
          - us-NJ
          - us-NM
          - us-NV
          - us-NY
          - us-OH
          - us-OK
          - us-OR
          - us-PA
          - us-PR
          - us-RI
          - us-SC
          - us-SD
          - us-TN
          - us-TX
          - us-UT
          - us-VA
          - us-VI
          - us-VT
          - us-WA
          - us-WI
          - us-WV
          - us-WY
          type: string
        registrationId:
          description: Registration ID for jurisdiction. This is used for display
            purposes only.
          type: string
        effectiveDateEndi:
          description: Expiration date of certificate in this jurisdiction
          format: date
          type: string
        notes:
          description: Optional internal notes. This is used for display purposes
            only.
          type: string
      required:
      - jurisId
    CustomerCertificate:
      example:
        exemptionNumber: exemptionNumber
        notes: notes
        customerId: customerId
        effectiveDateBegin: 2000-01-23
        certificateFile:
          contentsBase64: contentsBase64
          name: name
        jurises:
        - effectiveDateEndi: 2000-01-23
          notes: notes
          registrationId: registrationId
          jurisId: us-AK
        - effectiveDateEndi: 2000-01-23
          notes: notes
          registrationId: registrationId
          jurisId: us-AK
        customerName: customerName
      properties:
        customerId:
          description: |
            The Anrok customer ID used to link transactions for the same customer and to look up tax exemption certificates for a customer. This is typically the billing system's customer ID with a prefix to disambiguate.
            - If customerId is provided without customerName, that customer object must
              already exist in Anrok.
            - If both customerId and customerName are provided, the customer object will
              be created if it is not already present.
            - Customer IDs are unique across the entire seller account.
          type: string
        customerName:
          description: The name of the customer. This is used for display purposes
            only.
          type: string
        effectiveDateBegin:
          description: Effective date of certificate
          format: date
          type: string
        exemptionNumber:
          description: Certificate exemption number. This is used for display purposes
            only.
          type: string
        notes:
          description: Optional internal notes.
          type: string
        certificateFile:
          $ref: '#/components/schemas/CustomerCertificateFile'
        jurises:
          description: Jurisdictions for which certificate applies
          items:
            $ref: '#/components/schemas/CustomerCertificateJuris'
          type: array
      required:
      - certificateFile
      - customerId
      - effectiveDateBegin
      - jurises
    TransactionLineItem:
      example:
        amount: -2147483648
        isTaxIncludedInAmount: true
        quantity: quantity
        productExternalId: productExternalId
        id: id
      properties:
        id:
          description: "Optional identifier for the line item. This is saved by Anrok\
            \ and returned in the response, but not used for anything by Anrok."
          type: string
        productExternalId:
          description: A product ID that has already been defined in the Anrok UI
            (under "Product IDs"). This is used to determine whether the line item
            is taxable.
          type: string
        amount:
          description: The sale price in the smallest denomination of the currency
            (e.g. cents or pennies).
          maximum: 100000000000
          minimum: -100000000000
          type: integer
        isTaxIncludedInAmount:
          description: Whether the line item already includes tax in the amount.
          type: boolean
        quantity:
          description: "The quantity of the line item, as a string (e.g. `3` or `0.5`)."
          type: string
      required:
      - amount
      - productExternalId
    CustomerAddress:
      example:
        country: country
        city: city
        postalCode: postalCode
        region: region
        line1: line1
      properties:
        country:
          description: The country's full name or 2-letter ISO code
          nullable: true
          type: string
        line1:
          description: The "delivery line" of the address
          nullable: true
          type: string
        city:
          description: City or town name
          nullable: true
          type: string
        region:
          description: "Other principal subdivision (i.e. province, state, county)"
          nullable: true
          type: string
        postalCode:
          description: Postal code
          nullable: true
          type: string
      title: Address
    CustomerLegacyUsOnlyAddress:
      deprecated: true
      example:
        country: us
        line1: 123 Main St
        city: White Plains
        state: NY
        zipCode: "10601"
      properties:
        country:
          enum:
          - us
          type: string
        line1:
          description: The "delivery line" of the address
          nullable: true
          type: string
        city:
          description: The standard USPS format
          nullable: true
          type: string
        state:
          description: The standard USPS format
          nullable: true
          type: string
        zipCode:
          description: The standard USPS format
          nullable: true
          type: string
      required:
      - country
      title: Legacy US only address
    CustomerTaxId:
      description: The customer VAT registration number for a non-US country
      example:
        type: genericVatNumber
        value: value
      properties:
        type:
          description: This setting is purely metadata and does not affect tax calculation.
          enum:
          - genericVatNumber
          - euVrn
          type: string
        value:
          description: The customer VAT registration number for a non-US country
          type: string
      required:
      - type
      - value
    Transaction:
      properties:
        lineItems:
          description: The line items in the transaction.
          items:
            $ref: '#/components/schemas/TransactionLineItem'
          type: array
        currencyCode:
          description: Three letter ISO currency code (case insensitive).
          maxLength: 3
          minLength: 3
          type: string
        customerAddress:
          $ref: '#/components/schemas/Transaction_customerAddress'
        customerName:
          description: The name of the customer. This is used for display purposes
            only.
          type: string
        customerTaxIds:
          description: Tax IDs for the customer receiving the product
          items:
            $ref: '#/components/schemas/CustomerTaxId'
          type: array
        shipFromAddress:
          $ref: '#/components/schemas/Transaction_shipFromAddress'
        accountingDate:
          description: "The date that this transaction occurred, for accounting purposes.\
            \ Accounting date will typically correspond to the invoice date. This\
            \ is used to determine which tax return the transaction belongs to."
          example: 2017-07-21
          format: date
          type: string
        accountingTime:
          description: "The time that this transaction occurred, for accounting purposes.\
            \ If `accountingDate` is not provided, `accountingTime` is required to\
            \ compute an accounting date for the transaction."
          example: 2017-07-21T17:32:28Z
          format: date-time
          type: string
        accountingTimeZone:
          description: "A “tz database” string used to compute an accounting date\
            \ from the request's `accountingTime`. The request cannot provide both\
            \ an `accountingDate` and an `accountingTimeZone`. If `accountingTime`\
            \ is provided without specifying an `accountingTimeZone`, the time zone\
            \ configured on the seller account will be used."
          enum:
          - UTC
          - America/New_York
          - America/Chicago
          - America/Denver
          - America/Los_Angeles
          - America/Anchorage
          - Pacific/Honolulu
          - Australia/Perth
          - Australia/Adelaide
          - Australia/Darwin
          - Australia/Brisbane
          - Australia/Sydney
          - America/Halifax
          - America/Toronto
          - America/Winnipeg
          - America/Regina
          - America/Edmonton
          - America/Vancouver
          - Europe/Berlin
          - Europe/Brussels
          - Europe/Dublin
          - Europe/Helsinki
          - Europe/London
          - Europe/Paris
          - Europe/Rome
          - Europe/Stockholm
          - Asia/Tokyo
          - Asia/Singapore
          type: string
        taxDate:
          description: "The date to use for tax calculations. If omitted, Anrok will\
            \ use the the accounting date."
          example: 2017-07-21
          format: date
          type: string
      required:
      - currencyCode
      - customerAddress
      - lineItems
    CreateOrUpdateTransaction:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          customerId:
            $ref: '#/components/schemas/CustomerId'
          id:
            description: The ID of the new transaction. This must be unique across
              the entire seller account. This is typically the billing system's invoice
              ID with some prefix to disambiguate different systems.
            type: string
        required:
        - id
      example:
        lineItems:
        - amount: -2147483648
          isTaxIncludedInAmount: true
          quantity: quantity
          productExternalId: productExternalId
          id: id
        - amount: -2147483648
          isTaxIncludedInAmount: true
          quantity: quantity
          productExternalId: productExternalId
          id: id
        customerAddress:
          country: country
          city: city
          postalCode: postalCode
          region: region
          line1: line1
        accountingDate: 2017-07-21
        shipFromAddress:
          country: country
          city: city
          postalCode: postalCode
          region: region
          line1: line1
        accountingTimeZone: UTC
        customerTaxIds:
        - type: genericVatNumber
          value: value
        - type: genericVatNumber
          value: value
        customerId: null
        accountingTime: 2017-07-21T17:32:28Z
        id: id
        currencyCode: currencyCode
        taxDate: 2017-07-21
        customerName: customerName
    NotTaxedReason:
      example:
        reason:
          type: reverseCharge
        type: exempt
      properties:
        type:
          description: The reason a line item is not taxed.
          enum:
          - exempt
          - jurisHasNoTax
          - notCollecting
          - productNotTaxed
          type: string
        reason:
          $ref: '#/components/schemas/NotTaxedReason_reason'
    CreateEphemeralTransactionSuccess:
      example:
        lineItems:
        - taxAmountToCollect: 1
          id: id
          preTaxAmount: preTaxAmount
          jurises:
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
        - taxAmountToCollect: 1
          id: id
          preTaxAmount: preTaxAmount
          jurises:
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
        taxAmountToCollect: 0
        jurisSummaries:
        - notTaxedReasons:
          - reason:
              type: reverseCharge
            type: exempt
          - reason:
              type: reverseCharge
            type: exempt
          name: name
        - notTaxedReasons:
          - reason:
              type: reverseCharge
            type: exempt
          - reason:
              type: reverseCharge
            type: exempt
          name: name
        preTaxAmount: preTaxAmount
      properties:
        taxAmountToCollect:
          description: "The total tax amount to collect from the customer, in the\
            \ smallest denomination of the currency (e.g. cents or pennies)."
          format: int64
          type: integer
        lineItems:
          description: "The tax amount to collect, pre-tax amount, and taxes by jurisdiction\
            \ for each line item. Line items are returned in the same order they are\
            \ received."
          items:
            $ref: '#/components/schemas/CreateEphemeralTransactionSuccess_lineItems_inner'
          type: array
        preTaxAmount:
          description: "The total pre-tax amount for the transaction, in the smallest\
            \ denomination of the currency (e.g. cents or pennies)."
          format: Decimal
          type: string
        jurisSummaries:
          description: "For each jurisdiction, a summary of the reasons that the line\
            \ items are not taxed, or null if some items are taxed."
          items:
            $ref: '#/components/schemas/CreateEphemeralTransactionSuccess_jurisSummaries_inner'
          type: array
    CreateOrUpdateTransactionSuccess:
      allOf:
      - properties:
          version:
            description: The transaction version
            format: int32
            type: integer
      - $ref: '#/components/schemas/CreateEphemeralTransactionSuccess'
      example:
        lineItems:
        - taxAmountToCollect: 1
          id: id
          preTaxAmount: preTaxAmount
          jurises:
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
        - taxAmountToCollect: 1
          id: id
          preTaxAmount: preTaxAmount
          jurises:
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
          - notTaxedReason:
              reason:
                type: reverseCharge
              type: exempt
            name: name
            taxes:
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
            - taxableAmount: taxableAmount
              taxRate: taxRate
              taxAmount: taxAmount
              taxName: taxName
        taxAmountToCollect: 6
        jurisSummaries:
        - notTaxedReasons:
          - reason:
              type: reverseCharge
            type: exempt
          - reason:
              type: reverseCharge
            type: exempt
          name: name
        - notTaxedReasons:
          - reason:
              type: reverseCharge
            type: exempt
          - reason:
              type: reverseCharge
            type: exempt
          name: name
        preTaxAmount: preTaxAmount
        version: 0
    CreateTransactionCannotComputeTaxAmount:
      description: Error computing tax amount to be collected
      example:
        type: accountingTimeZoneNotSetForSeller
      properties:
        type:
          enum:
          - accountingTimeZoneNotSetForSeller
          - accountingTimeZoneNotSupported
          - currencyCodeNotSupported
          - customerAddressCouldNotResolve
          - customerIdNotFound
          - externalServiceError
          - jurisNotFound
          - productExternalIdUnknown
          - productTaxCategoryNotSupportedForJuris
          - taxDateTooFarInFuture
          type: string
    CreateTransactionCannotUpdate:
      description: Error updating transaction
      properties:
        type:
          enum:
          - transactionFrozenForFiling
          type: string
    CreateEphemeralTransaction:
      allOf:
      - $ref: '#/components/schemas/Transaction'
      - properties:
          customerId:
            description: |
              The Anrok customer ID used to link transactions for the same customer and to look up tax exemption certificates for a customer. This is typically the billing system's customer ID with a prefix to disambiguate.
              - If customerId is provided without customerName, that customer object must
                already exist in Anrok.
              - Customer IDs are unique across the entire seller account.
            type: string
      example:
        lineItems:
        - amount: -2147483648
          isTaxIncludedInAmount: true
          quantity: quantity
          productExternalId: productExternalId
          id: id
        - amount: -2147483648
          isTaxIncludedInAmount: true
          quantity: quantity
          productExternalId: productExternalId
          id: id
        customerAddress:
          country: country
          city: city
          postalCode: postalCode
          region: region
          line1: line1
        accountingDate: 2017-07-21
        shipFromAddress:
          country: country
          city: city
          postalCode: postalCode
          region: region
          line1: line1
        accountingTimeZone: UTC
        customerTaxIds:
        - type: genericVatNumber
          value: value
        - type: genericVatNumber
          value: value
        customerId: customerId
        accountingTime: 2017-07-21T17:32:28Z
        currencyCode: currencyCode
        taxDate: 2017-07-21
        customerName: customerName
    ValidateTaxId:
      example:
        customerAddress:
          country: country
          city: city
          postalCode: postalCode
          region: region
          line1: line1
        customerTaxIds:
        - value: value
        - value: value
      properties:
        customerAddress:
          $ref: '#/components/schemas/CustomerAddress'
        customerTaxIds:
          description: The tax IDs to validate.
          items:
            $ref: '#/components/schemas/ValidateTaxId_customerTaxIds_inner'
          type: array
      required:
      - customerAddress
      - customerTaxIds
    ValidateTaxIdSuccess:
      example:
        jurises:
        - taxIdNames:
            name: name
            abbreviation: abbreviation
          validTaxIds:
          - value: value
          - value: value
          name: name
        - taxIdNames:
            name: name
            abbreviation: abbreviation
          validTaxIds:
          - value: value
          - value: value
          name: name
      properties:
        jurises:
          description: List of applicable taxable jurisdictions that require tax ID
            collection/validation based on the customer address.
          items:
            $ref: '#/components/schemas/ValidateTaxIdSuccess_jurises_inner'
          type: array
    certificatesCreate_200_response:
      example:
        id: id
      properties:
        id:
          description: Certificate ID
          type: string
    certificatesCreate_409_response:
      example:
        type: duplicateJurisIds
      properties:
        type:
          enum:
          - duplicateJurisIds
          - customerIdNotFound
          - fileTypeNotSupported
          type: string
    certificatesArchive_409_response:
      example:
        type: certificateIdNotFound
      properties:
        type:
          enum:
          - certificateIdNotFound
          type: string
    transactionsCreateOrUpdate_409_response:
      oneOf:
      - $ref: '#/components/schemas/CreateTransactionCannotComputeTaxAmount'
      - $ref: '#/components/schemas/CreateTransactionCannotUpdate'
    transactionsCreateNegation_request:
      properties:
        originalTransactionId:
          description: The ID of the transaction you want to negate.
          type: string
        newTransactionId:
          description: The ID for the new negated transaction.
          type: string
        originalTransactionExpectedVersion:
          description: The expected transaction version. The refund will fail if this
            is not the latest version of the transaction.
          format: int32
          type: integer
      required:
      - newTransactionId
      - originalTransactionId
    transactionsVoid_request:
      properties:
        transactionExpectedVersion:
          description: The expected transaction version. The void will fail if this
            is not the latest version of the transaction.
          format: int32
          type: integer
    transactionsVoid_409_response:
      example:
        type: transactionIdNotFound
      properties:
        type:
          enum:
          - transactionIdNotFound
          - transactionExpectedVersionMismatch
          - transactionFrozenForFiling
          type: string
    productIdMappingsList_409_response:
      example:
        type: integrationIdNotFound
      properties:
        type:
          enum:
          - integrationIdNotFound
          type: string
    productIdMappingsAdd_request:
      properties:
        sourceId:
          description: Source product ID from billing system.
          type: string
        targetId:
          description: Target product ID on Anrok. This product must already exist
            in Anrok.
          type: string
        shouldOverwrite:
          default: false
          description: Whether this request should override an existing `sourceId`
            mapping.
          type: boolean
      required:
      - sourceId
      - targetId
    productIdMappingsAdd_409_response:
      example:
        type: integrationIdNotFound
      properties:
        type:
          enum:
          - integrationIdNotFound
          - sourceIdAlreadyMapped
          - targetIdNotFound
          type: string
    taxIdsValidate_409_response:
      example:
        type: customerAddressCouldNotResolve
      properties:
        type:
          enum:
          - customerAddressCouldNotResolve
          - externalServiceError
          - validationNotEnabled
          - validationNotSupportedForCountry
          type: string
    Transaction_customerAddress:
      anyOf:
      - $ref: '#/components/schemas/CustomerAddress'
      - $ref: '#/components/schemas/CustomerLegacyUsOnlyAddress'
      description: "The address where the product will be delivered or used. This\
        \ address determines the taxing jurisdictions and rates for destination-based\
        \ sourcing. For SaaS companies, this is typically the billing address. All\
        \ address fields are optional: fields can be omitted or have null value, but\
        \ empty strings are not allowed. Anrok will return an error if the address\
        \ does not have enough information to determine the top-level taxing jurisdiction\
        \ with high confidence."
    Transaction_shipFromAddress:
      anyOf:
      - $ref: '#/components/schemas/CustomerAddress'
      - $ref: '#/components/schemas/CustomerLegacyUsOnlyAddress'
      description: Optional. The address where the product will be shipped from. Some
        jurisdictions calculate taxes based on the ship-from address. Defaults to
        your Anrok business address if omitted.
    NotTaxedReason_reason:
      description: The detailed reason for an exemption. Only set when the type is
        'exempt'.
      example:
        type: reverseCharge
      properties:
        type:
          enum:
          - reverseCharge
          - customerExempt
          - transactionExempt
          type: string
    CreateEphemeralTransactionSuccess_lineItems_inner_jurises_inner_taxes_inner:
      example:
        taxableAmount: taxableAmount
        taxRate: taxRate
        taxAmount: taxAmount
        taxName: taxName
      properties:
        taxName:
          description: The name or abbreviation of the tax type (e.g. "VAT" or "Tax").
          type: string
        taxableAmount:
          description: "The amount on which tax is calculated, in the smallest denomination\
            \ of the currency (e.g. cents or pennies)."
          format: Decimal
          type: string
        taxAmount:
          description: "The amount of tax, in the smallest denomination of the currency\
            \ (e.g. cents or pennies)."
          format: Decimal
          type: string
        taxRate:
          description: "The tax rate, between 0 and 1. Make sure to include the taxableAmount\
            \ in your tax rate calculations."
          format: Decimal
          type: string
    CreateEphemeralTransactionSuccess_lineItems_inner_jurises_inner:
      example:
        notTaxedReason:
          reason:
            type: reverseCharge
          type: exempt
        name: name
        taxes:
        - taxableAmount: taxableAmount
          taxRate: taxRate
          taxAmount: taxAmount
          taxName: taxName
        - taxableAmount: taxableAmount
          taxRate: taxRate
          taxAmount: taxAmount
          taxName: taxName
      properties:
        name:
          description: The name of the jurisdiction.
          type: string
        notTaxedReason:
          $ref: '#/components/schemas/NotTaxedReason'
        taxes:
          description: "A list of taxes for the line item in the jurisdiction, or\
            \ null if it is not taxed."
          items:
            $ref: '#/components/schemas/CreateEphemeralTransactionSuccess_lineItems_inner_jurises_inner_taxes_inner'
          nullable: true
          type: array
    CreateEphemeralTransactionSuccess_lineItems_inner:
      example:
        taxAmountToCollect: 1
        id: id
        preTaxAmount: preTaxAmount
        jurises:
        - notTaxedReason:
            reason:
              type: reverseCharge
            type: exempt
          name: name
          taxes:
          - taxableAmount: taxableAmount
            taxRate: taxRate
            taxAmount: taxAmount
            taxName: taxName
          - taxableAmount: taxableAmount
            taxRate: taxRate
            taxAmount: taxAmount
            taxName: taxName
        - notTaxedReason:
            reason:
              type: reverseCharge
            type: exempt
          name: name
          taxes:
          - taxableAmount: taxableAmount
            taxRate: taxRate
            taxAmount: taxAmount
            taxName: taxName
          - taxableAmount: taxableAmount
            taxRate: taxRate
            taxAmount: taxAmount
            taxName: taxName
      properties:
        id:
          description: "Identifier for the line item that was provided in the request.\
            \ If no identifier was provided, this is null."
          nullable: true
          type: string
        taxAmountToCollect:
          description: "The tax amount to collect for the line item, in the smallest\
            \ denomination of the currency (e.g. cents or pennies)."
          format: int64
          type: integer
        preTaxAmount:
          description: "The pre-tax amount for the line item, in the smallest denomination\
            \ of the currency (e.g. cents or pennies)."
          format: Decimal
          type: string
        jurises:
          description: "For each jurisdiction, either a list of taxes for the line\
            \ item, or a reason that the line item is not taxed."
          items:
            $ref: '#/components/schemas/CreateEphemeralTransactionSuccess_lineItems_inner_jurises_inner'
          type: array
    CreateEphemeralTransactionSuccess_jurisSummaries_inner:
      example:
        notTaxedReasons:
        - reason:
            type: reverseCharge
          type: exempt
        - reason:
            type: reverseCharge
          type: exempt
        name: name
      properties:
        name:
          description: The name of the jurisdiction.
          type: string
        notTaxedReasons:
          items:
            $ref: '#/components/schemas/NotTaxedReason'
          nullable: true
          type: array
    ValidateTaxId_customerTaxIds_inner:
      example:
        value: value
      properties:
        value:
          description: The tax ID to validate.
          type: string
      required:
      - value
    ValidateTaxIdSuccess_jurises_inner_taxIdNames:
      description: List of applicable tax IDs to collect/validate for the jurisdiction.
      example:
        name: name
        abbreviation: abbreviation
      properties:
        name:
          description: A user-friendly tax ID name.
          type: string
        abbreviation:
          description: The tax ID abbreviation (if any).
          nullable: true
          type: string
    ValidateTaxIdSuccess_jurises_inner_validTaxIds_inner:
      example:
        value: value
      properties:
        value:
          description: The valid tax ID(s) from the request.
          type: string
    ValidateTaxIdSuccess_jurises_inner:
      example:
        taxIdNames:
          name: name
          abbreviation: abbreviation
        validTaxIds:
        - value: value
        - value: value
        name: name
      properties:
        name:
          description: A user-friendly name for the jurisdiction.
          type: string
        taxIdNames:
          $ref: '#/components/schemas/ValidateTaxIdSuccess_jurises_inner_taxIdNames'
        validTaxIds:
          description: A list of tax IDs from the API request that are valid in the
            jurisdiction.
          items:
            $ref: '#/components/schemas/ValidateTaxIdSuccess_jurises_inner_validTaxIds_inner'
          type: array
    inline_object:
      example:
        type: transactionIdNotFound
      properties:
        type:
          enum:
          - transactionIdNotFound
          - transactionExpectedVersionMismatch
          - transactionIsAlreadyANegation
          - duplicateTransactionId
          type: string
  securitySchemes:
    http:
      description: |
        The Anrok API uses API keys to authenticate requests. You can view and manage your API keys in [Anrok](https://app.anrok.com/-/api-keys). Use an Authorization header in the format `Bearer {apiKey}` to authenticate Anrok API requests.
      scheme: Bearer
      type: http
