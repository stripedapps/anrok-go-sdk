/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 0.0.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerTaxId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerTaxId{}

// CustomerTaxId The customer VAT registration number for a non-US country
type CustomerTaxId struct {
	// This setting is purely metadata and does not affect tax calculation.
	Type interface{} `json:"type"`
	// The customer VAT registration number for a non-US country
	Value interface{} `json:"value"`
}

// NewCustomerTaxId instantiates a new CustomerTaxId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerTaxId(type_ interface{}, value interface{}) *CustomerTaxId {
	this := CustomerTaxId{}
	this.Type = type_
	this.Value = value
	return &this
}

// NewCustomerTaxIdWithDefaults instantiates a new CustomerTaxId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerTaxIdWithDefaults() *CustomerTaxId {
	this := CustomerTaxId{}
	return &this
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CustomerTaxId) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerTaxId) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CustomerTaxId) SetType(v interface{}) {
	o.Type = v
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CustomerTaxId) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerTaxId) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CustomerTaxId) SetValue(v interface{}) {
	o.Value = v
}

func (o CustomerTaxId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerTaxId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableCustomerTaxId struct {
	value *CustomerTaxId
	isSet bool
}

func (v NullableCustomerTaxId) Get() *CustomerTaxId {
	return v.value
}

func (v *NullableCustomerTaxId) Set(val *CustomerTaxId) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerTaxId) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerTaxId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerTaxId(val *CustomerTaxId) *NullableCustomerTaxId {
	return &NullableCustomerTaxId{value: val, isSet: true}
}

func (v NullableCustomerTaxId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerTaxId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


