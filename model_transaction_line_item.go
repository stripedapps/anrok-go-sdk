/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TransactionLineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionLineItem{}

// TransactionLineItem struct for TransactionLineItem
type TransactionLineItem struct {
	// Identifier for the line item. Is saved by Anrok, but not used for anything by Anrok.
	Id *string `json:"id,omitempty"`
	// A product ID that has already been defined in the Anrok UI (under \"Product IDs\"). This is used to determine whether the line item is taxable.
	ProductExternalId string `json:"productExternalId"`
	// The sale price in the smallest denomination of the currency (e.g. cents or pennies)
	Amount int32 `json:"amount"`
}

// NewTransactionLineItem instantiates a new TransactionLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionLineItem(productExternalId string, amount int32) *TransactionLineItem {
	this := TransactionLineItem{}
	this.ProductExternalId = productExternalId
	this.Amount = amount
	return &this
}

// NewTransactionLineItemWithDefaults instantiates a new TransactionLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionLineItemWithDefaults() *TransactionLineItem {
	this := TransactionLineItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TransactionLineItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionLineItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TransactionLineItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TransactionLineItem) SetId(v string) {
	o.Id = &v
}

// GetProductExternalId returns the ProductExternalId field value
func (o *TransactionLineItem) GetProductExternalId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProductExternalId
}

// GetProductExternalIdOk returns a tuple with the ProductExternalId field value
// and a boolean to check if the value has been set.
func (o *TransactionLineItem) GetProductExternalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductExternalId, true
}

// SetProductExternalId sets field value
func (o *TransactionLineItem) SetProductExternalId(v string) {
	o.ProductExternalId = v
}

// GetAmount returns the Amount field value
func (o *TransactionLineItem) GetAmount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionLineItem) GetAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionLineItem) SetAmount(v int32) {
	o.Amount = v
}

func (o TransactionLineItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionLineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["productExternalId"] = o.ProductExternalId
	toSerialize["amount"] = o.Amount
	return toSerialize, nil
}

type NullableTransactionLineItem struct {
	value *TransactionLineItem
	isSet bool
}

func (v NullableTransactionLineItem) Get() *TransactionLineItem {
	return v.value
}

func (v *NullableTransactionLineItem) Set(val *TransactionLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionLineItem(val *TransactionLineItem) *NullableTransactionLineItem {
	return &NullableTransactionLineItem{value: val, isSet: true}
}

func (v NullableTransactionLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


