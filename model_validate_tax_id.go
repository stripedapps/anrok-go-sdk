/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidateTaxId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidateTaxId{}

// ValidateTaxId struct for ValidateTaxId
type ValidateTaxId struct {
	// The customer address. This address determines the applicable taxable jurisdictions for the customer. If the provided address cannot be resolved to a taxable jurisdiction with high confidence Anrok will return customerAddressCouldNotResolve.
	CustomerAddress CustomerAddress `json:"customerAddress"`
	// The tax IDs to validate.
	CustomerTaxIds []ValidateTaxIdCustomerTaxIdsInner `json:"customerTaxIds"`
}

type _ValidateTaxId ValidateTaxId

// NewValidateTaxId instantiates a new ValidateTaxId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidateTaxId(customerAddress CustomerAddress, customerTaxIds []ValidateTaxIdCustomerTaxIdsInner) *ValidateTaxId {
	this := ValidateTaxId{}
	this.CustomerAddress = customerAddress
	this.CustomerTaxIds = customerTaxIds
	return &this
}

// NewValidateTaxIdWithDefaults instantiates a new ValidateTaxId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidateTaxIdWithDefaults() *ValidateTaxId {
	this := ValidateTaxId{}
	return &this
}

// GetCustomerAddress returns the CustomerAddress field value
func (o *ValidateTaxId) GetCustomerAddress() CustomerAddress {
	if o == nil {
		var ret CustomerAddress
		return ret
	}

	return o.CustomerAddress
}

// GetCustomerAddressOk returns a tuple with the CustomerAddress field value
// and a boolean to check if the value has been set.
func (o *ValidateTaxId) GetCustomerAddressOk() (*CustomerAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerAddress, true
}

// SetCustomerAddress sets field value
func (o *ValidateTaxId) SetCustomerAddress(v CustomerAddress) {
	o.CustomerAddress = v
}

// GetCustomerTaxIds returns the CustomerTaxIds field value
func (o *ValidateTaxId) GetCustomerTaxIds() []ValidateTaxIdCustomerTaxIdsInner {
	if o == nil {
		var ret []ValidateTaxIdCustomerTaxIdsInner
		return ret
	}

	return o.CustomerTaxIds
}

// GetCustomerTaxIdsOk returns a tuple with the CustomerTaxIds field value
// and a boolean to check if the value has been set.
func (o *ValidateTaxId) GetCustomerTaxIdsOk() ([]ValidateTaxIdCustomerTaxIdsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomerTaxIds, true
}

// SetCustomerTaxIds sets field value
func (o *ValidateTaxId) SetCustomerTaxIds(v []ValidateTaxIdCustomerTaxIdsInner) {
	o.CustomerTaxIds = v
}

func (o ValidateTaxId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidateTaxId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customerAddress"] = o.CustomerAddress
	toSerialize["customerTaxIds"] = o.CustomerTaxIds
	return toSerialize, nil
}

func (o *ValidateTaxId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customerAddress",
		"customerTaxIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidateTaxId := _ValidateTaxId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidateTaxId)

	if err != nil {
		return err
	}

	*o = ValidateTaxId(varValidateTaxId)

	return err
}

type NullableValidateTaxId struct {
	value *ValidateTaxId
	isSet bool
}

func (v NullableValidateTaxId) Get() *ValidateTaxId {
	return v.value
}

func (v *NullableValidateTaxId) Set(val *ValidateTaxId) {
	v.value = val
	v.isSet = true
}

func (v NullableValidateTaxId) IsSet() bool {
	return v.isSet
}

func (v *NullableValidateTaxId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidateTaxId(val *ValidateTaxId) *NullableValidateTaxId {
	return &NullableValidateTaxId{value: val, isSet: true}
}

func (v NullableValidateTaxId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidateTaxId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


