/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CustomerInternationalAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerInternationalAddress{}

// CustomerInternationalAddress struct for CustomerInternationalAddress
type CustomerInternationalAddress struct {
	// The country's full name or 2-letter ISO code
	Country *string `json:"country,omitempty"`
	// The \"delivery line\" of the address
	Line1 *string `json:"line1,omitempty"`
	// City or town name
	City *string `json:"city,omitempty"`
	// Other principal subdivision (i.e. province, state, county)
	Region *string `json:"region,omitempty"`
	// Postal code
	PostalCode *string `json:"postalCode,omitempty"`
}

// NewCustomerInternationalAddress instantiates a new CustomerInternationalAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerInternationalAddress() *CustomerInternationalAddress {
	this := CustomerInternationalAddress{}
	return &this
}

// NewCustomerInternationalAddressWithDefaults instantiates a new CustomerInternationalAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerInternationalAddressWithDefaults() *CustomerInternationalAddress {
	this := CustomerInternationalAddress{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *CustomerInternationalAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInternationalAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *CustomerInternationalAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *CustomerInternationalAddress) SetCountry(v string) {
	o.Country = &v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise.
func (o *CustomerInternationalAddress) GetLine1() string {
	if o == nil || IsNil(o.Line1) {
		var ret string
		return ret
	}
	return *o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInternationalAddress) GetLine1Ok() (*string, bool) {
	if o == nil || IsNil(o.Line1) {
		return nil, false
	}
	return o.Line1, true
}

// HasLine1 returns a boolean if a field has been set.
func (o *CustomerInternationalAddress) HasLine1() bool {
	if o != nil && !IsNil(o.Line1) {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given string and assigns it to the Line1 field.
func (o *CustomerInternationalAddress) SetLine1(v string) {
	o.Line1 = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *CustomerInternationalAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInternationalAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *CustomerInternationalAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *CustomerInternationalAddress) SetCity(v string) {
	o.City = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CustomerInternationalAddress) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInternationalAddress) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CustomerInternationalAddress) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CustomerInternationalAddress) SetRegion(v string) {
	o.Region = &v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise.
func (o *CustomerInternationalAddress) GetPostalCode() string {
	if o == nil || IsNil(o.PostalCode) {
		var ret string
		return ret
	}
	return *o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomerInternationalAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PostalCode) {
		return nil, false
	}
	return o.PostalCode, true
}

// HasPostalCode returns a boolean if a field has been set.
func (o *CustomerInternationalAddress) HasPostalCode() bool {
	if o != nil && !IsNil(o.PostalCode) {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given string and assigns it to the PostalCode field.
func (o *CustomerInternationalAddress) SetPostalCode(v string) {
	o.PostalCode = &v
}

func (o CustomerInternationalAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerInternationalAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Line1) {
		toSerialize["line1"] = o.Line1
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.PostalCode) {
		toSerialize["postalCode"] = o.PostalCode
	}
	return toSerialize, nil
}

type NullableCustomerInternationalAddress struct {
	value *CustomerInternationalAddress
	isSet bool
}

func (v NullableCustomerInternationalAddress) Get() *CustomerInternationalAddress {
	return v.value
}

func (v *NullableCustomerInternationalAddress) Set(val *CustomerInternationalAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerInternationalAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerInternationalAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerInternationalAddress(val *CustomerInternationalAddress) *NullableCustomerInternationalAddress {
	return &NullableCustomerInternationalAddress{value: val, isSet: true}
}

func (v NullableCustomerInternationalAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerInternationalAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


