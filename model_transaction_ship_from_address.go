/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// TransactionShipFromAddress Optional. The address where the product will be shipped from. Some jurisdictions calculate taxes based on the ship-from address. Defaults to your Anrok business address if omitted.
type TransactionShipFromAddress struct {
	CustomerAddress *CustomerAddress
	CustomerLegacyUsOnlyAddress *CustomerLegacyUsOnlyAddress
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *TransactionShipFromAddress) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into CustomerAddress
	err = json.Unmarshal(data, &dst.CustomerAddress);
	if err == nil {
		jsonCustomerAddress, _ := json.Marshal(dst.CustomerAddress)
		if string(jsonCustomerAddress) == "{}" { // empty struct
			dst.CustomerAddress = nil
		} else {
			return nil // data stored in dst.CustomerAddress, return on the first match
		}
	} else {
		dst.CustomerAddress = nil
	}

	// try to unmarshal JSON data into CustomerLegacyUsOnlyAddress
	err = json.Unmarshal(data, &dst.CustomerLegacyUsOnlyAddress);
	if err == nil {
		jsonCustomerLegacyUsOnlyAddress, _ := json.Marshal(dst.CustomerLegacyUsOnlyAddress)
		if string(jsonCustomerLegacyUsOnlyAddress) == "{}" { // empty struct
			dst.CustomerLegacyUsOnlyAddress = nil
		} else {
			return nil // data stored in dst.CustomerLegacyUsOnlyAddress, return on the first match
		}
	} else {
		dst.CustomerLegacyUsOnlyAddress = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(TransactionShipFromAddress)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TransactionShipFromAddress) MarshalJSON() ([]byte, error) {
	if src.CustomerAddress != nil {
		return json.Marshal(&src.CustomerAddress)
	}

	if src.CustomerLegacyUsOnlyAddress != nil {
		return json.Marshal(&src.CustomerLegacyUsOnlyAddress)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTransactionShipFromAddress struct {
	value *TransactionShipFromAddress
	isSet bool
}

func (v NullableTransactionShipFromAddress) Get() *TransactionShipFromAddress {
	return v.value
}

func (v *NullableTransactionShipFromAddress) Set(val *TransactionShipFromAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionShipFromAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionShipFromAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionShipFromAddress(val *TransactionShipFromAddress) *NullableTransactionShipFromAddress {
	return &NullableTransactionShipFromAddress{value: val, isSet: true}
}

func (v NullableTransactionShipFromAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionShipFromAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


