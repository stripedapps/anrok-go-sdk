/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NotTaxedReason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotTaxedReason{}

// NotTaxedReason struct for NotTaxedReason
type NotTaxedReason struct {
	// The reason a line item is not taxed.
	Type *string `json:"type,omitempty"`
	Reason *NotTaxedReasonReason `json:"reason,omitempty"`
}

// NewNotTaxedReason instantiates a new NotTaxedReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotTaxedReason() *NotTaxedReason {
	this := NotTaxedReason{}
	return &this
}

// NewNotTaxedReasonWithDefaults instantiates a new NotTaxedReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotTaxedReasonWithDefaults() *NotTaxedReason {
	this := NotTaxedReason{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NotTaxedReason) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotTaxedReason) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NotTaxedReason) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NotTaxedReason) SetType(v string) {
	o.Type = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *NotTaxedReason) GetReason() NotTaxedReasonReason {
	if o == nil || IsNil(o.Reason) {
		var ret NotTaxedReasonReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotTaxedReason) GetReasonOk() (*NotTaxedReasonReason, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *NotTaxedReason) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given NotTaxedReasonReason and assigns it to the Reason field.
func (o *NotTaxedReason) SetReason(v NotTaxedReasonReason) {
	o.Reason = &v
}

func (o NotTaxedReason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotTaxedReason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return toSerialize, nil
}

type NullableNotTaxedReason struct {
	value *NotTaxedReason
	isSet bool
}

func (v NullableNotTaxedReason) Get() *NotTaxedReason {
	return v.value
}

func (v *NullableNotTaxedReason) Set(val *NotTaxedReason) {
	v.value = val
	v.isSet = true
}

func (v NullableNotTaxedReason) IsSet() bool {
	return v.isSet
}

func (v *NullableNotTaxedReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotTaxedReason(val *NotTaxedReason) *NullableNotTaxedReason {
	return &NullableNotTaxedReason{value: val, isSet: true}
}

func (v NullableNotTaxedReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotTaxedReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


