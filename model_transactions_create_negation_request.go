/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionsCreateNegationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionsCreateNegationRequest{}

// TransactionsCreateNegationRequest struct for TransactionsCreateNegationRequest
type TransactionsCreateNegationRequest struct {
	// The ID of the transaction you want to negate.
	OriginalTransactionId string `json:"originalTransactionId"`
	// The ID for the new negated transaction.
	NewTransactionId string `json:"newTransactionId"`
	// The expected transaction version. The refund will fail if this is not the latest version of the transaction.
	OriginalTransactionExpectedVersion *int32 `json:"originalTransactionExpectedVersion,omitempty"`
}

type _TransactionsCreateNegationRequest TransactionsCreateNegationRequest

// NewTransactionsCreateNegationRequest instantiates a new TransactionsCreateNegationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsCreateNegationRequest(originalTransactionId string, newTransactionId string) *TransactionsCreateNegationRequest {
	this := TransactionsCreateNegationRequest{}
	this.OriginalTransactionId = originalTransactionId
	this.NewTransactionId = newTransactionId
	return &this
}

// NewTransactionsCreateNegationRequestWithDefaults instantiates a new TransactionsCreateNegationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsCreateNegationRequestWithDefaults() *TransactionsCreateNegationRequest {
	this := TransactionsCreateNegationRequest{}
	return &this
}

// GetOriginalTransactionId returns the OriginalTransactionId field value
func (o *TransactionsCreateNegationRequest) GetOriginalTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OriginalTransactionId
}

// GetOriginalTransactionIdOk returns a tuple with the OriginalTransactionId field value
// and a boolean to check if the value has been set.
func (o *TransactionsCreateNegationRequest) GetOriginalTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OriginalTransactionId, true
}

// SetOriginalTransactionId sets field value
func (o *TransactionsCreateNegationRequest) SetOriginalTransactionId(v string) {
	o.OriginalTransactionId = v
}

// GetNewTransactionId returns the NewTransactionId field value
func (o *TransactionsCreateNegationRequest) GetNewTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NewTransactionId
}

// GetNewTransactionIdOk returns a tuple with the NewTransactionId field value
// and a boolean to check if the value has been set.
func (o *TransactionsCreateNegationRequest) GetNewTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NewTransactionId, true
}

// SetNewTransactionId sets field value
func (o *TransactionsCreateNegationRequest) SetNewTransactionId(v string) {
	o.NewTransactionId = v
}

// GetOriginalTransactionExpectedVersion returns the OriginalTransactionExpectedVersion field value if set, zero value otherwise.
func (o *TransactionsCreateNegationRequest) GetOriginalTransactionExpectedVersion() int32 {
	if o == nil || IsNil(o.OriginalTransactionExpectedVersion) {
		var ret int32
		return ret
	}
	return *o.OriginalTransactionExpectedVersion
}

// GetOriginalTransactionExpectedVersionOk returns a tuple with the OriginalTransactionExpectedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionsCreateNegationRequest) GetOriginalTransactionExpectedVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.OriginalTransactionExpectedVersion) {
		return nil, false
	}
	return o.OriginalTransactionExpectedVersion, true
}

// HasOriginalTransactionExpectedVersion returns a boolean if a field has been set.
func (o *TransactionsCreateNegationRequest) HasOriginalTransactionExpectedVersion() bool {
	if o != nil && !IsNil(o.OriginalTransactionExpectedVersion) {
		return true
	}

	return false
}

// SetOriginalTransactionExpectedVersion gets a reference to the given int32 and assigns it to the OriginalTransactionExpectedVersion field.
func (o *TransactionsCreateNegationRequest) SetOriginalTransactionExpectedVersion(v int32) {
	o.OriginalTransactionExpectedVersion = &v
}

func (o TransactionsCreateNegationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionsCreateNegationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["originalTransactionId"] = o.OriginalTransactionId
	toSerialize["newTransactionId"] = o.NewTransactionId
	if !IsNil(o.OriginalTransactionExpectedVersion) {
		toSerialize["originalTransactionExpectedVersion"] = o.OriginalTransactionExpectedVersion
	}
	return toSerialize, nil
}

func (o *TransactionsCreateNegationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"originalTransactionId",
		"newTransactionId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionsCreateNegationRequest := _TransactionsCreateNegationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionsCreateNegationRequest)

	if err != nil {
		return err
	}

	*o = TransactionsCreateNegationRequest(varTransactionsCreateNegationRequest)

	return err
}

type NullableTransactionsCreateNegationRequest struct {
	value *TransactionsCreateNegationRequest
	isSet bool
}

func (v NullableTransactionsCreateNegationRequest) Get() *TransactionsCreateNegationRequest {
	return v.value
}

func (v *NullableTransactionsCreateNegationRequest) Set(val *TransactionsCreateNegationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsCreateNegationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsCreateNegationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsCreateNegationRequest(val *TransactionsCreateNegationRequest) *NullableTransactionsCreateNegationRequest {
	return &NullableTransactionsCreateNegationRequest{value: val, isSet: true}
}

func (v NullableTransactionsCreateNegationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsCreateNegationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


