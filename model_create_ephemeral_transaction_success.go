/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateEphemeralTransactionSuccess type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEphemeralTransactionSuccess{}

// CreateEphemeralTransactionSuccess struct for CreateEphemeralTransactionSuccess
type CreateEphemeralTransactionSuccess struct {
	// The total tax amount to collect from the customer, in the smallest denomination of the currency (e.g. cents or pennies).
	TaxAmountToCollect *int64 `json:"taxAmountToCollect,omitempty"`
	// The tax amount to collect, pre-tax amount, and taxes by jurisdiction for each line item. Line items are returned in the same order they are received.
	LineItems []CreateEphemeralTransactionSuccessLineItemsInner `json:"lineItems,omitempty"`
	// The total pre-tax amount for the transaction, in the smallest denomination of the currency (e.g. cents or pennies).
	PreTaxAmount *string `json:"preTaxAmount,omitempty"`
	// For each jurisdiction, a summary of the reasons that the line items are not taxed, or null if some items are taxed.
	JurisSummaries []CreateEphemeralTransactionSuccessJurisSummariesInner `json:"jurisSummaries,omitempty"`
}

// NewCreateEphemeralTransactionSuccess instantiates a new CreateEphemeralTransactionSuccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEphemeralTransactionSuccess() *CreateEphemeralTransactionSuccess {
	this := CreateEphemeralTransactionSuccess{}
	return &this
}

// NewCreateEphemeralTransactionSuccessWithDefaults instantiates a new CreateEphemeralTransactionSuccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEphemeralTransactionSuccessWithDefaults() *CreateEphemeralTransactionSuccess {
	this := CreateEphemeralTransactionSuccess{}
	return &this
}

// GetTaxAmountToCollect returns the TaxAmountToCollect field value if set, zero value otherwise.
func (o *CreateEphemeralTransactionSuccess) GetTaxAmountToCollect() int64 {
	if o == nil || IsNil(o.TaxAmountToCollect) {
		var ret int64
		return ret
	}
	return *o.TaxAmountToCollect
}

// GetTaxAmountToCollectOk returns a tuple with the TaxAmountToCollect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEphemeralTransactionSuccess) GetTaxAmountToCollectOk() (*int64, bool) {
	if o == nil || IsNil(o.TaxAmountToCollect) {
		return nil, false
	}
	return o.TaxAmountToCollect, true
}

// HasTaxAmountToCollect returns a boolean if a field has been set.
func (o *CreateEphemeralTransactionSuccess) HasTaxAmountToCollect() bool {
	if o != nil && !IsNil(o.TaxAmountToCollect) {
		return true
	}

	return false
}

// SetTaxAmountToCollect gets a reference to the given int64 and assigns it to the TaxAmountToCollect field.
func (o *CreateEphemeralTransactionSuccess) SetTaxAmountToCollect(v int64) {
	o.TaxAmountToCollect = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *CreateEphemeralTransactionSuccess) GetLineItems() []CreateEphemeralTransactionSuccessLineItemsInner {
	if o == nil || IsNil(o.LineItems) {
		var ret []CreateEphemeralTransactionSuccessLineItemsInner
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEphemeralTransactionSuccess) GetLineItemsOk() ([]CreateEphemeralTransactionSuccessLineItemsInner, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *CreateEphemeralTransactionSuccess) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []CreateEphemeralTransactionSuccessLineItemsInner and assigns it to the LineItems field.
func (o *CreateEphemeralTransactionSuccess) SetLineItems(v []CreateEphemeralTransactionSuccessLineItemsInner) {
	o.LineItems = v
}

// GetPreTaxAmount returns the PreTaxAmount field value if set, zero value otherwise.
func (o *CreateEphemeralTransactionSuccess) GetPreTaxAmount() string {
	if o == nil || IsNil(o.PreTaxAmount) {
		var ret string
		return ret
	}
	return *o.PreTaxAmount
}

// GetPreTaxAmountOk returns a tuple with the PreTaxAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEphemeralTransactionSuccess) GetPreTaxAmountOk() (*string, bool) {
	if o == nil || IsNil(o.PreTaxAmount) {
		return nil, false
	}
	return o.PreTaxAmount, true
}

// HasPreTaxAmount returns a boolean if a field has been set.
func (o *CreateEphemeralTransactionSuccess) HasPreTaxAmount() bool {
	if o != nil && !IsNil(o.PreTaxAmount) {
		return true
	}

	return false
}

// SetPreTaxAmount gets a reference to the given string and assigns it to the PreTaxAmount field.
func (o *CreateEphemeralTransactionSuccess) SetPreTaxAmount(v string) {
	o.PreTaxAmount = &v
}

// GetJurisSummaries returns the JurisSummaries field value if set, zero value otherwise.
func (o *CreateEphemeralTransactionSuccess) GetJurisSummaries() []CreateEphemeralTransactionSuccessJurisSummariesInner {
	if o == nil || IsNil(o.JurisSummaries) {
		var ret []CreateEphemeralTransactionSuccessJurisSummariesInner
		return ret
	}
	return o.JurisSummaries
}

// GetJurisSummariesOk returns a tuple with the JurisSummaries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEphemeralTransactionSuccess) GetJurisSummariesOk() ([]CreateEphemeralTransactionSuccessJurisSummariesInner, bool) {
	if o == nil || IsNil(o.JurisSummaries) {
		return nil, false
	}
	return o.JurisSummaries, true
}

// HasJurisSummaries returns a boolean if a field has been set.
func (o *CreateEphemeralTransactionSuccess) HasJurisSummaries() bool {
	if o != nil && !IsNil(o.JurisSummaries) {
		return true
	}

	return false
}

// SetJurisSummaries gets a reference to the given []CreateEphemeralTransactionSuccessJurisSummariesInner and assigns it to the JurisSummaries field.
func (o *CreateEphemeralTransactionSuccess) SetJurisSummaries(v []CreateEphemeralTransactionSuccessJurisSummariesInner) {
	o.JurisSummaries = v
}

func (o CreateEphemeralTransactionSuccess) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEphemeralTransactionSuccess) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaxAmountToCollect) {
		toSerialize["taxAmountToCollect"] = o.TaxAmountToCollect
	}
	if !IsNil(o.LineItems) {
		toSerialize["lineItems"] = o.LineItems
	}
	if !IsNil(o.PreTaxAmount) {
		toSerialize["preTaxAmount"] = o.PreTaxAmount
	}
	if !IsNil(o.JurisSummaries) {
		toSerialize["jurisSummaries"] = o.JurisSummaries
	}
	return toSerialize, nil
}

type NullableCreateEphemeralTransactionSuccess struct {
	value *CreateEphemeralTransactionSuccess
	isSet bool
}

func (v NullableCreateEphemeralTransactionSuccess) Get() *CreateEphemeralTransactionSuccess {
	return v.value
}

func (v *NullableCreateEphemeralTransactionSuccess) Set(val *CreateEphemeralTransactionSuccess) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEphemeralTransactionSuccess) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEphemeralTransactionSuccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEphemeralTransactionSuccess(val *CreateEphemeralTransactionSuccess) *NullableCreateEphemeralTransactionSuccess {
	return &NullableCreateEphemeralTransactionSuccess{value: val, isSet: true}
}

func (v NullableCreateEphemeralTransactionSuccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEphemeralTransactionSuccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


