/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 0.0.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateEphemeralTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEphemeralTransaction{}

// CreateEphemeralTransaction struct for CreateEphemeralTransaction
type CreateEphemeralTransaction struct {
	// The line items in the transaction.
	LineItems interface{} `json:"lineItems"`
	// Three letter ISO currency code (case insensitive).
	CurrencyCode interface{} `json:"currencyCode"`
	// The address where the product will be delivered or used. This address determines the taxing jurisdictions and rates for destination-based sourcing. For SaaS companies, this is typically the billing address. All address fields are optional: fields can be omitted or have null value, but empty strings are not allowed. Anrok will return an error if the address does not have enough information to determine the top-level taxing jurisdiction with high confidence. International is a premium feature. Please contact support@anrok.com for more information.
	CustomerAddress interface{} `json:"customerAddress"`
	// The Anrok customer ID used to link transactions for the same customer and to look up tax exemption certificates for a customer. This is typically the billing system's customer ID with a prefix to disambiguate. - If customerId is provided without customerName, that customer object must already exist in Anrok. - If both customerId and customerName are provided, the customer object will be created if it is not already present. - Customer IDs are unique across the entire seller account. 
	CustomerId interface{} `json:"customerId,omitempty"`
	// The name of the customer
	CustomerName interface{} `json:"customerName,omitempty"`
	// Tax IDs for the customer receiving the product
	CustomerTaxIds interface{} `json:"customerTaxIds,omitempty"`
	// The date that this transaction occurred, for accounting purposes. Accounting date will typically correspond to the invoice date. This is used to determine which tax return the transaction belongs to.
	AccountingDate interface{} `json:"accountingDate,omitempty"`
	// The time that this transaction occurred, for accounting purposes. If accountingDate is not provided, accountingTime is required to compute an accounting date for the transaction.
	AccountingTime interface{} `json:"accountingTime,omitempty"`
	// A “tz database” string used to compute an accounting date from the request's accountingTime. The request cannot provide both an accountingDate and an accountingTimeZone. If accountingTime is provided without specifying an accountingTimeZone, the time zone configured on the seller account will be used.
	AccountingTimeZone interface{} `json:"accountingTimeZone,omitempty"`
	// The date to use for tax calculations. If omitted, Anrok will use the the minimum of the accounting date and two days in the future.
	TaxDate interface{} `json:"taxDate,omitempty"`
}

// NewCreateEphemeralTransaction instantiates a new CreateEphemeralTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEphemeralTransaction(lineItems interface{}, currencyCode interface{}, customerAddress interface{}) *CreateEphemeralTransaction {
	this := CreateEphemeralTransaction{}
	this.LineItems = lineItems
	this.CurrencyCode = currencyCode
	this.CustomerAddress = customerAddress
	return &this
}

// NewCreateEphemeralTransactionWithDefaults instantiates a new CreateEphemeralTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEphemeralTransactionWithDefaults() *CreateEphemeralTransaction {
	this := CreateEphemeralTransaction{}
	return &this
}

// GetLineItems returns the LineItems field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CreateEphemeralTransaction) GetLineItems() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetLineItemsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return &o.LineItems, true
}

// SetLineItems sets field value
func (o *CreateEphemeralTransaction) SetLineItems(v interface{}) {
	o.LineItems = v
}

// GetCurrencyCode returns the CurrencyCode field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CreateEphemeralTransaction) GetCurrencyCode() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetCurrencyCodeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CurrencyCode) {
		return nil, false
	}
	return &o.CurrencyCode, true
}

// SetCurrencyCode sets field value
func (o *CreateEphemeralTransaction) SetCurrencyCode(v interface{}) {
	o.CurrencyCode = v
}

// GetCustomerAddress returns the CustomerAddress field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *CreateEphemeralTransaction) GetCustomerAddress() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.CustomerAddress
}

// GetCustomerAddressOk returns a tuple with the CustomerAddress field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetCustomerAddressOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CustomerAddress) {
		return nil, false
	}
	return &o.CustomerAddress, true
}

// SetCustomerAddress sets field value
func (o *CreateEphemeralTransaction) SetCustomerAddress(v interface{}) {
	o.CustomerAddress = v
}

// GetCustomerId returns the CustomerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetCustomerId() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetCustomerIdOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CustomerId) {
		return nil, false
	}
	return &o.CustomerId, true
}

// HasCustomerId returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasCustomerId() bool {
	if o != nil && IsNil(o.CustomerId) {
		return true
	}

	return false
}

// SetCustomerId gets a reference to the given interface{} and assigns it to the CustomerId field.
func (o *CreateEphemeralTransaction) SetCustomerId(v interface{}) {
	o.CustomerId = v
}

// GetCustomerName returns the CustomerName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetCustomerName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CustomerName
}

// GetCustomerNameOk returns a tuple with the CustomerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetCustomerNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CustomerName) {
		return nil, false
	}
	return &o.CustomerName, true
}

// HasCustomerName returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasCustomerName() bool {
	if o != nil && IsNil(o.CustomerName) {
		return true
	}

	return false
}

// SetCustomerName gets a reference to the given interface{} and assigns it to the CustomerName field.
func (o *CreateEphemeralTransaction) SetCustomerName(v interface{}) {
	o.CustomerName = v
}

// GetCustomerTaxIds returns the CustomerTaxIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetCustomerTaxIds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.CustomerTaxIds
}

// GetCustomerTaxIdsOk returns a tuple with the CustomerTaxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetCustomerTaxIdsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.CustomerTaxIds) {
		return nil, false
	}
	return &o.CustomerTaxIds, true
}

// HasCustomerTaxIds returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasCustomerTaxIds() bool {
	if o != nil && IsNil(o.CustomerTaxIds) {
		return true
	}

	return false
}

// SetCustomerTaxIds gets a reference to the given interface{} and assigns it to the CustomerTaxIds field.
func (o *CreateEphemeralTransaction) SetCustomerTaxIds(v interface{}) {
	o.CustomerTaxIds = v
}

// GetAccountingDate returns the AccountingDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetAccountingDate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AccountingDate
}

// GetAccountingDateOk returns a tuple with the AccountingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetAccountingDateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AccountingDate) {
		return nil, false
	}
	return &o.AccountingDate, true
}

// HasAccountingDate returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasAccountingDate() bool {
	if o != nil && IsNil(o.AccountingDate) {
		return true
	}

	return false
}

// SetAccountingDate gets a reference to the given interface{} and assigns it to the AccountingDate field.
func (o *CreateEphemeralTransaction) SetAccountingDate(v interface{}) {
	o.AccountingDate = v
}

// GetAccountingTime returns the AccountingTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetAccountingTime() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AccountingTime
}

// GetAccountingTimeOk returns a tuple with the AccountingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetAccountingTimeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AccountingTime) {
		return nil, false
	}
	return &o.AccountingTime, true
}

// HasAccountingTime returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasAccountingTime() bool {
	if o != nil && IsNil(o.AccountingTime) {
		return true
	}

	return false
}

// SetAccountingTime gets a reference to the given interface{} and assigns it to the AccountingTime field.
func (o *CreateEphemeralTransaction) SetAccountingTime(v interface{}) {
	o.AccountingTime = v
}

// GetAccountingTimeZone returns the AccountingTimeZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetAccountingTimeZone() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.AccountingTimeZone
}

// GetAccountingTimeZoneOk returns a tuple with the AccountingTimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetAccountingTimeZoneOk() (*interface{}, bool) {
	if o == nil || IsNil(o.AccountingTimeZone) {
		return nil, false
	}
	return &o.AccountingTimeZone, true
}

// HasAccountingTimeZone returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasAccountingTimeZone() bool {
	if o != nil && IsNil(o.AccountingTimeZone) {
		return true
	}

	return false
}

// SetAccountingTimeZone gets a reference to the given interface{} and assigns it to the AccountingTimeZone field.
func (o *CreateEphemeralTransaction) SetAccountingTimeZone(v interface{}) {
	o.AccountingTimeZone = v
}

// GetTaxDate returns the TaxDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEphemeralTransaction) GetTaxDate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.TaxDate
}

// GetTaxDateOk returns a tuple with the TaxDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEphemeralTransaction) GetTaxDateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.TaxDate) {
		return nil, false
	}
	return &o.TaxDate, true
}

// HasTaxDate returns a boolean if a field has been set.
func (o *CreateEphemeralTransaction) HasTaxDate() bool {
	if o != nil && IsNil(o.TaxDate) {
		return true
	}

	return false
}

// SetTaxDate gets a reference to the given interface{} and assigns it to the TaxDate field.
func (o *CreateEphemeralTransaction) SetTaxDate(v interface{}) {
	o.TaxDate = v
}

func (o CreateEphemeralTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEphemeralTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LineItems != nil {
		toSerialize["lineItems"] = o.LineItems
	}
	if o.CurrencyCode != nil {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if o.CustomerAddress != nil {
		toSerialize["customerAddress"] = o.CustomerAddress
	}
	if o.CustomerId != nil {
		toSerialize["customerId"] = o.CustomerId
	}
	if o.CustomerName != nil {
		toSerialize["customerName"] = o.CustomerName
	}
	if o.CustomerTaxIds != nil {
		toSerialize["customerTaxIds"] = o.CustomerTaxIds
	}
	if o.AccountingDate != nil {
		toSerialize["accountingDate"] = o.AccountingDate
	}
	if o.AccountingTime != nil {
		toSerialize["accountingTime"] = o.AccountingTime
	}
	if o.AccountingTimeZone != nil {
		toSerialize["accountingTimeZone"] = o.AccountingTimeZone
	}
	if o.TaxDate != nil {
		toSerialize["taxDate"] = o.TaxDate
	}
	return toSerialize, nil
}

type NullableCreateEphemeralTransaction struct {
	value *CreateEphemeralTransaction
	isSet bool
}

func (v NullableCreateEphemeralTransaction) Get() *CreateEphemeralTransaction {
	return v.value
}

func (v *NullableCreateEphemeralTransaction) Set(val *CreateEphemeralTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEphemeralTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEphemeralTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEphemeralTransaction(val *CreateEphemeralTransaction) *NullableCreateEphemeralTransaction {
	return &NullableCreateEphemeralTransaction{value: val, isSet: true}
}

func (v NullableCreateEphemeralTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEphemeralTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


