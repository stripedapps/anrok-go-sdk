/*
Anrok API

# API reference  The Anrok API server is accessible at `https://api.anrok.com`.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header `Authorization: Bearer {apiKey}`.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CustomerLegacyUsOnlyAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerLegacyUsOnlyAddress{}

// CustomerLegacyUsOnlyAddress struct for CustomerLegacyUsOnlyAddress
type CustomerLegacyUsOnlyAddress struct {
	Country string `json:"country"`
	// The \"delivery line\" of the address
	Line1 NullableString `json:"line1,omitempty"`
	// The standard USPS format
	City NullableString `json:"city,omitempty"`
	// The standard USPS format
	State NullableString `json:"state,omitempty"`
	// The standard USPS format
	ZipCode NullableString `json:"zipCode,omitempty"`
}

type _CustomerLegacyUsOnlyAddress CustomerLegacyUsOnlyAddress

// NewCustomerLegacyUsOnlyAddress instantiates a new CustomerLegacyUsOnlyAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerLegacyUsOnlyAddress(country string) *CustomerLegacyUsOnlyAddress {
	this := CustomerLegacyUsOnlyAddress{}
	this.Country = country
	return &this
}

// NewCustomerLegacyUsOnlyAddressWithDefaults instantiates a new CustomerLegacyUsOnlyAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerLegacyUsOnlyAddressWithDefaults() *CustomerLegacyUsOnlyAddress {
	this := CustomerLegacyUsOnlyAddress{}
	return &this
}

// GetCountry returns the Country field value
func (o *CustomerLegacyUsOnlyAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *CustomerLegacyUsOnlyAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *CustomerLegacyUsOnlyAddress) SetCountry(v string) {
	o.Country = v
}

// GetLine1 returns the Line1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerLegacyUsOnlyAddress) GetLine1() string {
	if o == nil || IsNil(o.Line1.Get()) {
		var ret string
		return ret
	}
	return *o.Line1.Get()
}

// GetLine1Ok returns a tuple with the Line1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerLegacyUsOnlyAddress) GetLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line1.Get(), o.Line1.IsSet()
}

// HasLine1 returns a boolean if a field has been set.
func (o *CustomerLegacyUsOnlyAddress) HasLine1() bool {
	if o != nil && o.Line1.IsSet() {
		return true
	}

	return false
}

// SetLine1 gets a reference to the given NullableString and assigns it to the Line1 field.
func (o *CustomerLegacyUsOnlyAddress) SetLine1(v string) {
	o.Line1.Set(&v)
}
// SetLine1Nil sets the value for Line1 to be an explicit nil
func (o *CustomerLegacyUsOnlyAddress) SetLine1Nil() {
	o.Line1.Set(nil)
}

// UnsetLine1 ensures that no value is present for Line1, not even an explicit nil
func (o *CustomerLegacyUsOnlyAddress) UnsetLine1() {
	o.Line1.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerLegacyUsOnlyAddress) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerLegacyUsOnlyAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *CustomerLegacyUsOnlyAddress) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *CustomerLegacyUsOnlyAddress) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *CustomerLegacyUsOnlyAddress) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *CustomerLegacyUsOnlyAddress) UnsetCity() {
	o.City.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerLegacyUsOnlyAddress) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerLegacyUsOnlyAddress) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *CustomerLegacyUsOnlyAddress) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *CustomerLegacyUsOnlyAddress) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *CustomerLegacyUsOnlyAddress) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *CustomerLegacyUsOnlyAddress) UnsetState() {
	o.State.Unset()
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CustomerLegacyUsOnlyAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode.Get()) {
		var ret string
		return ret
	}
	return *o.ZipCode.Get()
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CustomerLegacyUsOnlyAddress) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipCode.Get(), o.ZipCode.IsSet()
}

// HasZipCode returns a boolean if a field has been set.
func (o *CustomerLegacyUsOnlyAddress) HasZipCode() bool {
	if o != nil && o.ZipCode.IsSet() {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given NullableString and assigns it to the ZipCode field.
func (o *CustomerLegacyUsOnlyAddress) SetZipCode(v string) {
	o.ZipCode.Set(&v)
}
// SetZipCodeNil sets the value for ZipCode to be an explicit nil
func (o *CustomerLegacyUsOnlyAddress) SetZipCodeNil() {
	o.ZipCode.Set(nil)
}

// UnsetZipCode ensures that no value is present for ZipCode, not even an explicit nil
func (o *CustomerLegacyUsOnlyAddress) UnsetZipCode() {
	o.ZipCode.Unset()
}

func (o CustomerLegacyUsOnlyAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerLegacyUsOnlyAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["country"] = o.Country
	if o.Line1.IsSet() {
		toSerialize["line1"] = o.Line1.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.ZipCode.IsSet() {
		toSerialize["zipCode"] = o.ZipCode.Get()
	}
	return toSerialize, nil
}

func (o *CustomerLegacyUsOnlyAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"country",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerLegacyUsOnlyAddress := _CustomerLegacyUsOnlyAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomerLegacyUsOnlyAddress)

	if err != nil {
		return err
	}

	*o = CustomerLegacyUsOnlyAddress(varCustomerLegacyUsOnlyAddress)

	return err
}

type NullableCustomerLegacyUsOnlyAddress struct {
	value *CustomerLegacyUsOnlyAddress
	isSet bool
}

func (v NullableCustomerLegacyUsOnlyAddress) Get() *CustomerLegacyUsOnlyAddress {
	return v.value
}

func (v *NullableCustomerLegacyUsOnlyAddress) Set(val *CustomerLegacyUsOnlyAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerLegacyUsOnlyAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerLegacyUsOnlyAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerLegacyUsOnlyAddress(val *CustomerLegacyUsOnlyAddress) *NullableCustomerLegacyUsOnlyAddress {
	return &NullableCustomerLegacyUsOnlyAddress{value: val, isSet: true}
}

func (v NullableCustomerLegacyUsOnlyAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerLegacyUsOnlyAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


