/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 0.0.1
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CertificatesArchive409Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatesArchive409Response{}

// CertificatesArchive409Response struct for CertificatesArchive409Response
type CertificatesArchive409Response struct {
	Type interface{} `json:"type,omitempty"`
}

// NewCertificatesArchive409Response instantiates a new CertificatesArchive409Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesArchive409Response() *CertificatesArchive409Response {
	this := CertificatesArchive409Response{}
	return &this
}

// NewCertificatesArchive409ResponseWithDefaults instantiates a new CertificatesArchive409Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesArchive409ResponseWithDefaults() *CertificatesArchive409Response {
	this := CertificatesArchive409Response{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertificatesArchive409Response) GetType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertificatesArchive409Response) GetTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CertificatesArchive409Response) HasType() bool {
	if o != nil && IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given interface{} and assigns it to the Type field.
func (o *CertificatesArchive409Response) SetType(v interface{}) {
	o.Type = v
}

func (o CertificatesArchive409Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatesArchive409Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCertificatesArchive409Response struct {
	value *CertificatesArchive409Response
	isSet bool
}

func (v NullableCertificatesArchive409Response) Get() *CertificatesArchive409Response {
	return v.value
}

func (v *NullableCertificatesArchive409Response) Set(val *CertificatesArchive409Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesArchive409Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesArchive409Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesArchive409Response(val *CertificatesArchive409Response) *NullableCertificatesArchive409Response {
	return &NullableCertificatesArchive409Response{value: val, isSet: true}
}

func (v NullableCertificatesArchive409Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesArchive409Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


