/*
Anrok API

# API reference  The Anrok API server is accessible at “https://api.anrok.com”.  All requests are HTTP POSTs with JSON in the body.  Authentication is via an HTTP header “Authorization: Bearer {sellerId}/{apiKeyId}/secret.{apiKeySecret}”.  The default rate limit for a seller account is 10 API requests per second. 

API version: 1.0.0
Contact: support@anrok.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateTransactionCannotUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateTransactionCannotUpdate{}

// CreateTransactionCannotUpdate Error updating transaction
type CreateTransactionCannotUpdate struct {
	Type *string `json:"type,omitempty"`
}

// NewCreateTransactionCannotUpdate instantiates a new CreateTransactionCannotUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTransactionCannotUpdate() *CreateTransactionCannotUpdate {
	this := CreateTransactionCannotUpdate{}
	return &this
}

// NewCreateTransactionCannotUpdateWithDefaults instantiates a new CreateTransactionCannotUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTransactionCannotUpdateWithDefaults() *CreateTransactionCannotUpdate {
	this := CreateTransactionCannotUpdate{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CreateTransactionCannotUpdate) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTransactionCannotUpdate) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CreateTransactionCannotUpdate) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CreateTransactionCannotUpdate) SetType(v string) {
	o.Type = &v
}

func (o CreateTransactionCannotUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateTransactionCannotUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCreateTransactionCannotUpdate struct {
	value *CreateTransactionCannotUpdate
	isSet bool
}

func (v NullableCreateTransactionCannotUpdate) Get() *CreateTransactionCannotUpdate {
	return v.value
}

func (v *NullableCreateTransactionCannotUpdate) Set(val *CreateTransactionCannotUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTransactionCannotUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTransactionCannotUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTransactionCannotUpdate(val *CreateTransactionCannotUpdate) *NullableCreateTransactionCannotUpdate {
	return &NullableCreateTransactionCannotUpdate{value: val, isSet: true}
}

func (v NullableCreateTransactionCannotUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateTransactionCannotUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


